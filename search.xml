<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSAPP Bomb Lab 学习记录</title>
      <link href="/posts/d2510e07.html"/>
      <url>/posts/d2510e07.html</url>
      
        <content type="html"><![CDATA[<h2 id="开始之前">开始之前</h2><h3 id="下载代码文件">下载代码文件</h3><p>CSAPP的project可以从<a href="https://csapp.cs.cmu.edu/3e/labs.html">官方网站</a>上下载。其中project代码文件在<a href="https://csapp.cs.cmu.edu/3e/bomb.tar">Self-Study Handout</a>链接那里。使用如下命令下载datalab文件，并解压进入目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://csapp.cs.cmu.edu/3e/bomb.tar --no-check-certificate</span><br><span class="line">tar -xvf bomb.tar</span><br><span class="line"><span class="built_in">cd</span> bomb/</span><br></pre></td></tr></table></figure><p>进入这个目录后，可以看到一个名为 bomb.c 的文件，还有一个叫作 bomb 的文件。其中 bomb 是这个project的核心。我们需要在 bomb 中输入若干个phase的答案，如果输错了，就会爆炸。我们所要做的，就是根据 bomb 反汇编的结果，推测出需要输入的答案，在不引爆炸弹的情况下安全拆除炸弹。bomb.c 包含 bomb 的部分源码，可以通过 bomb.c 了解 bomb 的大致逻辑。</p><h3 id="一些基础操作">一些基础操作</h3><p>objdump:</p><ul><li><code>objdump -d bomb</code>：反汇编整个bomb</li><li><code>objdump -t bomb</code>：打印符号表。里面可以查看变量的名称、大小以及地址、函数名等信息</li></ul><p>strings:</p><ul><li><code>strings bomb</code>：打印出bomb所有可打印的字符串</li></ul><p>gdb:</p><ul><li><code>gdb bomb</code>使用gdb调试程序</li></ul><p>以下为gdb内部命令：</p><p>打印类：</p><ul><li><code>h 命令名</code>(<code>help 命令名</code>)：查看某个命令的详细信息。如<code>help x</code></li><li><code>disas 函数名</code>(<code>disassemble 函数名</code>)：反汇编bomb中的某个函数。比如<code>disas read_line</code>则反汇编<code>read_line</code>函数</li><li><code>i r</code>(<code>info register</code>)：查看寄存器内容</li><li><code>x/s 地址</code>：打印该地址对应的字符串，直到遇到<code>\0</code>。如<code>x/s 0x4025a4</code>打印0x4025a4处的字符串。类似的操作还有<code>x/d 地址</code>(以十进制的形式打印)、<code>x/x 地址</code>(以十六进制的形式打印)、<code>x/23c 地址</code>(以字符的形式打印，打印23个字符)</li><li><code>p 寄存器名</code>：打印寄存器中储存的值。比如<code>p $rsp</code>。</li></ul><p>执行类：</p><ul><li><code>c</code>(<code>continue</code>)：当程序遇到断点时停下后，让程序继续运行</li><li><code>r</code>(<code>run</code>)：运行程序</li><li><code>stepi</code>：单步执行</li></ul><p>断点类：</p><ul><li><code>b 函数名</code>(<code>break 函数名</code>)：在某个函数设置断点，比如<code>b read_line</code>则在进入<code>read_line</code>函数时停止</li><li><code>b *地址</code>：在某个地址设置断点，比如<code>b *0x400ee0</code>则在0x400ee0处设置断点</li><li><code>info b</code>：列出所有断点</li><li><code>d 序号</code>(<code>delete 序号</code>)：删除序号对应的断点。比如<code>d 2</code>删除序号为2的断点</li><li><code>disable 序号</code>：禁用序号对应的断点</li><li><code>enable 序号</code>：启用序号对应的断点</li></ul><h2 id="题目的个人解答">题目的个人解答</h2><h3 id="phase-1">phase_1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0000000000400ee0 &lt;phase_1&gt;:</span><br><span class="line">  400ee0:    48 83 ec 08              sub    $0x8,%rsp</span><br><span class="line">  400ee4:    be 00 24 40 00           mov    $0x402400,%esi</span><br><span class="line">  400ee9:    e8 4a 04 00 00           call   401338 &lt;strings_not_equal&gt;</span><br><span class="line">  400eee:    85 c0                    test   %eax,%eax</span><br><span class="line">  400ef0:    74 05                    je     400ef7 &lt;phase_1+0x17&gt;</span><br><span class="line">  400ef2:    e8 43 05 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  400ef7:    48 83 c4 08              add    $0x8,%rsp</span><br><span class="line">  400efb:    c3                       ret</span><br></pre></td></tr></table></figure><p>由此看出，触发炸弹的代码为<code>call   40143a &lt;explode_bomb&gt;</code>。为了调试时避免炸弹爆炸，使用gdb调试时可以打上断点：<code>b explode_bomb</code>（或<code>b *0x40143a</code>）。</p><p>每行代码的理解如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0000000000400ee0 &lt;phase_1&gt;:     # 传入参数为input，存放在edi中</span><br><span class="line">sub $0x8,%rsp                   # 分配8字节的栈空间</span><br><span class="line"></span><br><span class="line">mov $0x402400,%esi              # esi=0x402400</span><br><span class="line">call 401338 &lt;strings_not_equal&gt; # 调用strings_not_equal函数，传入edi,esi，返回eax</span><br><span class="line">test %eax,%eax                  # 计算eax&amp;eax并设置ZF位，若eax为0则ZF为1</span><br><span class="line">je 400ef7 &lt;phase_1+0x17&gt;        # 如果ZF为1，则跳转到400ef7地址执行</span><br><span class="line">call 40143a &lt;explode_bomb&gt;      # 否则，调用explode_bomb函数</span><br><span class="line"></span><br><span class="line">400ef7 &lt;phase_1+0x17&gt;:</span><br><span class="line">add $0x8,%rsp                   # 恢复栈空间</span><br><span class="line">ret                             # 函数返回</span><br></pre></td></tr></table></figure><p>phase_1的大致代码逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">phase_1</span><span class="params">(<span class="type">char</span> *input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *esi = (<span class="type">const</span> <span class="type">char</span> *)<span class="number">0x402400</span>;</span><br><span class="line">    <span class="keyword">if</span> (strings_not_equal(input, esi) != <span class="number">0</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，需要找到地址为0x402400对应的字符串。可以直接在反汇编文件中找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">402400 426f7264 65722072 656c6174 696f6e73  Border relations</span><br><span class="line">402410 20776974 68204361 6e616461 20686176   with Canada hav</span><br><span class="line">402420 65206e65 76657220 6265656e 20626574  e never been bet</span><br><span class="line">402430 7465722e 00000000 576f7721 20596f75  ter.....Wow! You</span><br></pre></td></tr></table></figure><p>或者在gdb中使用命令<code>x/s 0x402400</code>查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/s 0x402400</span><br><span class="line">0x402400:       &quot;Border relations with Canada have never been better.&quot;</span><br></pre></td></tr></table></figure><p>可以看出，0x402400对应的字符串为<code>Border relations with Canada have never been better.</code>。这就是phase_1的答案。</p><h3 id="phase-2">phase_2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">0000000000400efc &lt;phase_2&gt;:</span><br><span class="line">  400efc:    55                       push   %rbp</span><br><span class="line">  400efd:    53                       push   %rbx</span><br><span class="line">  400efe:    48 83 ec 28              sub    $0x28,%rsp</span><br><span class="line">  400f02:    48 89 e6                 mov    %rsp,%rsi</span><br><span class="line">  400f05:    e8 52 05 00 00           call   40145c &lt;read_six_numbers&gt;</span><br><span class="line">  400f0a:    83 3c 24 01              cmpl   $0x1,(%rsp)</span><br><span class="line">  400f0e:    74 20                    je     400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f10:    e8 25 05 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f15:    eb 19                    jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f17:    8b 43 fc                 mov    -0x4(%rbx),%eax</span><br><span class="line">  400f1a:    01 c0                    add    %eax,%eax</span><br><span class="line">  400f1c:    39 03                    cmp    %eax,(%rbx)</span><br><span class="line">  400f1e:    74 05                    je     400f25 &lt;phase_2+0x29&gt;</span><br><span class="line">  400f20:    e8 15 05 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f25:    48 83 c3 04              add    $0x4,%rbx</span><br><span class="line">  400f29:    48 39 eb                 cmp    %rbp,%rbx</span><br><span class="line">  400f2c:    75 e9                    jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f2e:    eb 0c                    jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class="line">  400f30:    48 8d 5c 24 04           lea    0x4(%rsp),%rbx</span><br><span class="line">  400f35:    48 8d 6c 24 18           lea    0x18(%rsp),%rbp</span><br><span class="line">  400f3a:    eb db                    jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f3c:    48 83 c4 28              add    $0x28,%rsp</span><br><span class="line">  400f40:    5b                       pop    %rbx</span><br><span class="line">  400f41:    5d                       pop    %rbp</span><br><span class="line">  400f42:    c3                       ret</span><br></pre></td></tr></table></figure><p>代码的解读如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">0000000000400efc &lt;phase_2&gt;:</span><br><span class="line">push   %rbp                         # int* rbp;</span><br><span class="line">push   %rbx                         # int* rbx;</span><br><span class="line">sub    $0x28,%rsp                   </span><br><span class="line"></span><br><span class="line">mov    %rsp,%rsi                    # rsi=rsp</span><br><span class="line">call   40145c &lt;read_six_numbers&gt;    # 调用read_six_numbers函数</span><br><span class="line">cmpl   $0x1,(%rsp)                  # 比较1与*rsp（即rsp[0]），并设置ZF位</span><br><span class="line">je     400f30 &lt;phase_2+0x34&gt;        # 如果相等（ZF=1），则跳转到400f30</span><br><span class="line">call   40143a &lt;explode_bomb&gt;        # 否则，调用explode_bomb函数</span><br><span class="line">jmp    400f30 &lt;phase_2+0x34&gt;        # 跳转到400f30</span><br><span class="line"></span><br><span class="line">400f17 &lt;phase_2+0x1b&gt;:</span><br><span class="line">mov    -0x4(%rbx),%eax              # eax=*(rbx-4)</span><br><span class="line">add    %eax,%eax                    # eax=eax+eax（即eax*=2）</span><br><span class="line">cmp    %eax,(%rbx)                  # 比较eax与*rbx</span><br><span class="line">je     400f25 &lt;phase_2+0x29&gt;        # 如果相等（ZF=1），则跳转到400f25</span><br><span class="line">call   40143a &lt;explode_bomb&gt;        # 否则，调用explode_bomb函数</span><br><span class="line"></span><br><span class="line">400f25 &lt;phase_2+0x29&gt;:</span><br><span class="line">add    $0x4,%rbx                    # rbx=rbx+4（指向下一个数组元素）</span><br><span class="line">cmp    %rbp,%rbx                    # 比较rbp与rbx </span><br><span class="line">jne    400f17 &lt;phase_2+0x1b&gt;        # 如果不相等（ZF=0），则跳转到400f17</span><br><span class="line">jmp    400f3c &lt;phase_2+0x40&gt;        # 跳转到400f3c</span><br><span class="line"></span><br><span class="line">400f30 &lt;phase_2+0x34&gt;:</span><br><span class="line">lea    0x4(%rsp),%rbx               # rbx=rsp+4（指向rsp[1]）</span><br><span class="line">lea    0x18(%rsp),%rbp              # rbp=rsp+24（指向rsp数组的尾后部分）</span><br><span class="line">jmp    400f17 &lt;phase_2+0x1b&gt;        # 跳转到400f17</span><br><span class="line"></span><br><span class="line">400f3c &lt;phase_2+0x40&gt;:</span><br><span class="line">add    $0x28,%rsp</span><br><span class="line">pop    %rbx</span><br><span class="line">pop    %rbp</span><br><span class="line">ret </span><br></pre></td></tr></table></figure><p><code>read_six_numbers</code>传入什么参数？读取的数字存在哪里？可以看看汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">000000000040145c &lt;read_six_numbers&gt;:</span><br><span class="line">  40145c:    48 83 ec 18              sub    $0x18,%rsp</span><br><span class="line">  401460:    48 89 f2                 mov    %rsi,%rdx</span><br><span class="line">  401463:    48 8d 4e 04              lea    0x4(%rsi),%rcx</span><br><span class="line">  401467:    48 8d 46 14              lea    0x14(%rsi),%rax</span><br><span class="line">  40146b:    48 89 44 24 08           mov    %rax,0x8(%rsp)</span><br><span class="line">  401470:    48 8d 46 10              lea    0x10(%rsi),%rax</span><br><span class="line">  401474:    48 89 04 24              mov    %rax,(%rsp)</span><br><span class="line">  401478:    4c 8d 4e 0c              lea    0xc(%rsi),%r9</span><br><span class="line">  40147c:    4c 8d 46 08              lea    0x8(%rsi),%r8</span><br><span class="line">  401480:    be c3 25 40 00           mov    $0x4025c3,%esi</span><br><span class="line">  401485:    b8 00 00 00 00           mov    $0x0,%eax</span><br><span class="line">  40148a:    e8 61 f7 ff ff           call   400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  40148f:    83 f8 05                 cmp    $0x5,%eax</span><br><span class="line">  401492:    7f 05                    jg     401499 &lt;read_six_numbers+0x3d&gt;</span><br><span class="line">  401494:    e8 a1 ff ff ff           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  401499:    48 83 c4 18              add    $0x18,%rsp</span><br><span class="line">  40149d:    c3                       ret</span><br></pre></td></tr></table></figure><p>其中0x4025c3对应的字符串为<code>%d %d %d %d %d %d</code>。分析以上代码可以看出，<code>read_six_numbers</code>使用了rsi寄存器作为存储字符串的位置，并将个数保存在rax中。以下是<code>read_six_numbers</code>的大致逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">read_six_numbers</span><span class="params">(<span class="type">char</span> *rdi, <span class="type">char</span> *rsi)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> eax = <span class="built_in">sscanf</span>(rdi, <span class="string">&quot;%d %d %d %d %d %d&quot;</span>, &amp;rsi[<span class="number">0</span>], &amp;rsi[<span class="number">1</span>], &amp;rsi[<span class="number">2</span>], &amp;rsi[<span class="number">3</span>], &amp;rsi[<span class="number">4</span>], &amp;rsi[<span class="number">5</span>]);</span><br><span class="line">    <span class="keyword">if</span> (eax &lt;= <span class="number">5</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">return</span> eax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合phase_2的代码，可知大致逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">phase_2</span><span class="params">(<span class="type">char</span> *input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *nums;</span><br><span class="line">    read_six_numbers(input, nums);</span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] != <span class="number">1</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="type">int</span> *begin = nums + <span class="number">1</span>, *end = nums + <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> eax = *(begin - <span class="number">1</span>);</span><br><span class="line">        eax *= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (eax != *begin)</span><br><span class="line">            explode_bomb();</span><br><span class="line">        ++begin;</span><br><span class="line">    &#125; <span class="keyword">while</span> (begin != end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，nums数组的特点是大小为6、每一个数都是前一个数的两倍、第一个数是1。故答案为<code>1 2 4 8 16 32</code>。</p><h3 id="phase-3">phase_3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">  400f43:    48 83 ec 18              sub    $0x18,%rsp</span><br><span class="line">  400f47:    48 8d 4c 24 0c           lea    0xc(%rsp),%rcx</span><br><span class="line">  400f4c:    48 8d 54 24 08           lea    0x8(%rsp),%rdx</span><br><span class="line">  400f51:    be cf 25 40 00           mov    $0x4025cf,%esi</span><br><span class="line">  400f56:    b8 00 00 00 00           mov    $0x0,%eax</span><br><span class="line">  400f5b:    e8 90 fc ff ff           call   400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  400f60:    83 f8 01                 cmp    $0x1,%eax</span><br><span class="line">  400f63:    7f 05                    jg     400f6a &lt;phase_3+0x27&gt;</span><br><span class="line">  400f65:    e8 d0 04 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f6a:    83 7c 24 08 07           cmpl   $0x7,0x8(%rsp)</span><br><span class="line">  400f6f:    77 3c                    ja     400fad &lt;phase_3+0x6a&gt;</span><br><span class="line">  400f71:    8b 44 24 08              mov    0x8(%rsp),%eax</span><br><span class="line">  400f75:    ff 24 c5 70 24 40 00     jmp    *0x402470(,%rax,8)</span><br><span class="line">  400f7c:    b8 cf 00 00 00           mov    $0xcf,%eax</span><br><span class="line">  400f81:    eb 3b                    jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f83:    b8 c3 02 00 00           mov    $0x2c3,%eax</span><br><span class="line">  400f88:    eb 34                    jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f8a:    b8 00 01 00 00           mov    $0x100,%eax</span><br><span class="line">  400f8f:    eb 2d                    jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f91:    b8 85 01 00 00           mov    $0x185,%eax</span><br><span class="line">  400f96:    eb 26                    jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f98:    b8 ce 00 00 00           mov    $0xce,%eax</span><br><span class="line">  400f9d:    eb 1f                    jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f9f:    b8 aa 02 00 00           mov    $0x2aa,%eax</span><br><span class="line">  400fa4:    eb 18                    jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fa6:    b8 47 01 00 00           mov    $0x147,%eax</span><br><span class="line">  400fab:    eb 11                    jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fad:    e8 88 04 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fb2:    b8 00 00 00 00           mov    $0x0,%eax</span><br><span class="line">  400fb7:    eb 05                    jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fb9:    b8 37 01 00 00           mov    $0x137,%eax</span><br><span class="line">  400fbe:    3b 44 24 0c              cmp    0xc(%rsp),%eax</span><br><span class="line">  400fc2:    74 05                    je     400fc9 &lt;phase_3+0x86&gt;</span><br><span class="line">  400fc4:    e8 71 04 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fc9:    48 83 c4 18              add    $0x18,%rsp</span><br><span class="line">  400fcd:    c3                       ret</span><br></pre></td></tr></table></figure><p>代码的解读如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">sub    $0x18,%rsp</span><br><span class="line">lea    0xc(%rsp),%rcx               # rcx=rsp+12</span><br><span class="line">lea    0x8(%rsp),%rdx               # rdx=rsp+8</span><br><span class="line">mov    $0x4025cf,%esi               # esi=0x4025cf</span><br><span class="line">mov    $0x0,%eax                    # eax=0</span><br><span class="line">call   400bf0 &lt;__isoc99_sscanf@plt&gt; # 调用sscanf函数，传入edi,esi,rdx,rcx，返回eax</span><br><span class="line">cmp    $0x1,%eax                    # 比较eax和1</span><br><span class="line">jg     400f6a &lt;phase_3+0x27&gt;        # 如果eax&gt;1，则跳转到400f6a</span><br><span class="line">call   40143a &lt;explode_bomb&gt;        # 否则，调用explode_bomb函数</span><br><span class="line"></span><br><span class="line">400f6a &lt;phase_3+0x27&gt;:</span><br><span class="line">cmpl   $0x7,0x8(%rsp)               # 比较*rdx（输入的第一个数字）和7</span><br><span class="line">ja     400fad &lt;phase_3+0x6a&gt;        # 如果*rdx&gt;7，则跳转到400fad</span><br><span class="line">mov    0x8(%rsp),%eax               # eax=*rdx</span><br><span class="line">jmp    *0x402470(,%rax,8)           # 跳转到402470+rax*8处的地址</span><br><span class="line"></span><br><span class="line">400f7c:</span><br><span class="line">mov    $0xcf,%eax                   # eax=207</span><br><span class="line">jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line"></span><br><span class="line">400f83:</span><br><span class="line">mov    $0x2c3,%eax                  # eax=707</span><br><span class="line">jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line"></span><br><span class="line">400f8a:</span><br><span class="line">mov    $0x100,%eax                  # eax=256</span><br><span class="line">jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line"></span><br><span class="line">400f91:</span><br><span class="line">mov    $0x185,%eax                  # eax=389</span><br><span class="line">jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line"></span><br><span class="line">400f98:</span><br><span class="line">mov    $0xce,%eax                   # eax=206</span><br><span class="line">jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line"></span><br><span class="line">400f9f:</span><br><span class="line">mov    $0x2aa,%eax                  # eax=682</span><br><span class="line">jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line"></span><br><span class="line">400fa6:</span><br><span class="line">mov    $0x147,%eax                  # eax=327</span><br><span class="line">jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line"></span><br><span class="line">400fad &lt;phase_3+0x6a&gt;:</span><br><span class="line">call   40143a &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line">400fb2:</span><br><span class="line">mov    $0x0,%eax</span><br><span class="line">jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line"></span><br><span class="line">400fb9:</span><br><span class="line">mov    $0x137,%eax                  # eax=311</span><br><span class="line"></span><br><span class="line">400fbe &lt;phase_3+0x7b&gt;:</span><br><span class="line">cmp    0xc(%rsp),%eax               # 比较rcx和eax</span><br><span class="line"></span><br><span class="line">400fb2:</span><br><span class="line">je     400fc9 &lt;phase_3+0x86&gt;        # 如果相等，则跳转到400fc9</span><br><span class="line">call   40143a &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line">400fc9 &lt;phase_3+0x86&gt;:</span><br><span class="line">add    $0x18,%rsp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>其中，phase_3出现了两个地址：0x4025cf和0x402470。下面逐一分析：</p><p>0x4025cf附近的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4025c0 702e0025 64202564 20256420 25642025  p..%d %d %d %d %</span><br><span class="line">4025d0 64202564 00457272 6f723a20 5072656d  d %d.Error: Prem</span><br></pre></td></tr></table></figure><p>因此可以确定，地址在4025cf处的字符串为<code>%d %d</code>，因此可以确定phase_3的输入是2个int。</p><p>0x402470附近的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">402470 7c0f4000 00000000 b90f4000 00000000  |.@.......@.....</span><br><span class="line">402480 830f4000 00000000 8a0f4000 00000000  ..@.......@.....</span><br><span class="line">402490 910f4000 00000000 980f4000 00000000  ..@.......@.....</span><br><span class="line">4024a0 9f0f4000 00000000 a60f4000 00000000  ..@.......@.....</span><br></pre></td></tr></table></figure><p>根据上述地址的写法，推测这是小端法的写法，是倒过来写的，反过来即可得到跳转的地址。又代码块出现了大量<code>jmp    400fbe &lt;phase_3+0x7b&gt;</code>语句，推测这是一个switch语句快，jump对应switch中的break。</p><p>phase_3的大致代码逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">phase_3</span><span class="params">(<span class="type">char</span> *input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf</span>(input, <span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b) &lt;= <span class="number">1</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">7</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">switch</span> (a)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        a = <span class="number">207</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        a = <span class="number">707</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        a = <span class="number">256</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        a = <span class="number">389</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        a = <span class="number">206</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        a = <span class="number">682</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        a = <span class="number">327</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">        explode_bomb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>故以下答案均能通过：<code>0 207</code>、<code>1 311</code>、<code>2 707</code>、<code>3 256</code>、<code>4 389</code>、<code>5 206</code>、<code>6 682</code>、<code>7 327</code></p><h3 id="phase-4">phase_4</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">000000000040100c &lt;phase_4&gt;:</span><br><span class="line">  40100c:    48 83 ec 18              sub    $0x18,%rsp</span><br><span class="line">  401010:    48 8d 4c 24 0c           lea    0xc(%rsp),%rcx</span><br><span class="line">  401015:    48 8d 54 24 08           lea    0x8(%rsp),%rdx</span><br><span class="line">  40101a:    be cf 25 40 00           mov    $0x4025cf,%esi</span><br><span class="line">  40101f:    b8 00 00 00 00           mov    $0x0,%eax</span><br><span class="line">  401024:    e8 c7 fb ff ff           call   400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  401029:    83 f8 02                 cmp    $0x2,%eax</span><br><span class="line">  40102c:    75 07                    jne    401035 &lt;phase_4+0x29&gt;</span><br><span class="line">  40102e:    83 7c 24 08 0e           cmpl   $0xe,0x8(%rsp)</span><br><span class="line">  401033:    76 05                    jbe    40103a &lt;phase_4+0x2e&gt;</span><br><span class="line">  401035:    e8 00 04 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  40103a:    ba 0e 00 00 00           mov    $0xe,%edx</span><br><span class="line">  40103f:    be 00 00 00 00           mov    $0x0,%esi</span><br><span class="line">  401044:    8b 7c 24 08              mov    0x8(%rsp),%edi</span><br><span class="line">  401048:    e8 81 ff ff ff           call   400fce &lt;func4&gt;</span><br><span class="line">  40104d:    85 c0                    test   %eax,%eax</span><br><span class="line">  40104f:    75 07                    jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class="line">  401051:    83 7c 24 0c 00           cmpl   $0x0,0xc(%rsp)</span><br><span class="line">  401056:    74 05                    je     40105d &lt;phase_4+0x51&gt;</span><br><span class="line">  401058:    e8 dd 03 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  40105d:    48 83 c4 18              add    $0x18,%rsp</span><br><span class="line">  401061:    c3                       ret</span><br></pre></td></tr></table></figure><p>代码的解读如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">000000000040100c &lt;phase_4&gt;:</span><br><span class="line">sub    $0x18,%rsp</span><br><span class="line">lea    0xc(%rsp),%rcx</span><br><span class="line">lea    0x8(%rsp),%rdx</span><br><span class="line">mov    $0x4025cf,%esi</span><br><span class="line">mov    $0x0,%eax</span><br><span class="line">call   400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">cmp    $0x2,%eax</span><br><span class="line">jne    401035 &lt;phase_4+0x29&gt;</span><br><span class="line">cmpl   $0xe,0x8(%rsp)               # 比较*rdx（输入的第一个数字）和14</span><br><span class="line">jbe    40103a &lt;phase_4+0x2e&gt;        # 如果*rdx&lt;=14，则跳转到40103a</span><br><span class="line"></span><br><span class="line">401035 &lt;phase_4+0x29&gt;:</span><br><span class="line">call   40143a &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line">40103a &lt;phase_4+0x2e&gt;:</span><br><span class="line">mov    $0xe,%edx                    # edx=14</span><br><span class="line">mov    $0x0,%esi                    # esi=0</span><br><span class="line">mov    0x8(%rsp),%edi               # edi=*rdx</span><br><span class="line">call   400fce &lt;func4&gt;               # 调用func4，传入edi,esi,edx，返回eax</span><br><span class="line">test   %eax,%eax</span><br><span class="line">jne    401058 &lt;phase_4+0x4c&gt;        # 若eax不为0则跳转到401058</span><br><span class="line">cmpl   $0x0,0xc(%rsp)</span><br><span class="line">je     40105d &lt;phase_4+0x51&gt;        # 若*rcx为0则跳转到40105d</span><br><span class="line"></span><br><span class="line">401058 &lt;phase_4+0x4c&gt;:</span><br><span class="line">call   40143a &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line">40105d &lt;phase_4+0x51&gt;:</span><br><span class="line">add    $0x18,%rsp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>该代码前面部分和phase_3的前面部分是一样的，容易知道代码的大致逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">phase_4</span><span class="params">(<span class="type">char</span> *input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf</span>(input, <span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b) != <span class="number">2</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">14</span> || a &lt; <span class="number">0</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">if</span> (func4(a, <span class="number">0</span>, <span class="number">14</span>) != <span class="number">0</span> || b != <span class="number">0</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要通过此部分，func4的返回值要为0，且输入的第二个数字要为0。该代码调用了func4，还需要看func4的汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">0000000000400fce &lt;func4&gt;:</span><br><span class="line">  400fce:    48 83 ec 08              sub    $0x8,%rsp</span><br><span class="line">  400fd2:    89 d0                    mov    %edx,%eax</span><br><span class="line">  400fd4:    29 f0                    sub    %esi,%eax</span><br><span class="line">  400fd6:    89 c1                    mov    %eax,%ecx</span><br><span class="line">  400fd8:    c1 e9 1f                 shr    $0x1f,%ecx</span><br><span class="line">  400fdb:    01 c8                    add    %ecx,%eax</span><br><span class="line">  400fdd:    d1 f8                    sar    %eax</span><br><span class="line">  400fdf:    8d 0c 30                 lea    (%rax,%rsi,1),%ecx</span><br><span class="line">  400fe2:    39 f9                    cmp    %edi,%ecx</span><br><span class="line">  400fe4:    7e 0c                    jle    400ff2 &lt;func4+0x24&gt;</span><br><span class="line">  400fe6:    8d 51 ff                 lea    -0x1(%rcx),%edx</span><br><span class="line">  400fe9:    e8 e0 ff ff ff           call   400fce &lt;func4&gt;</span><br><span class="line">  400fee:    01 c0                    add    %eax,%eax</span><br><span class="line">  400ff0:    eb 15                    jmp    401007 &lt;func4+0x39&gt;</span><br><span class="line">  400ff2:    b8 00 00 00 00           mov    $0x0,%eax</span><br><span class="line">  400ff7:    39 f9                    cmp    %edi,%ecx</span><br><span class="line">  400ff9:    7d 0c                    jge    401007 &lt;func4+0x39&gt;</span><br><span class="line">  400ffb:    8d 71 01                 lea    0x1(%rcx),%esi</span><br><span class="line">  400ffe:    e8 cb ff ff ff           call   400fce &lt;func4&gt;</span><br><span class="line">  401003:    8d 44 00 01              lea    0x1(%rax,%rax,1),%eax</span><br><span class="line">  401007:    48 83 c4 08              add    $0x8,%rsp</span><br><span class="line">  40100b:    c3                       ret</span><br></pre></td></tr></table></figure><p>代码的解读如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0000000000400fce &lt;func4&gt;:       # 传入参数为edi,esi,edx，返回rax</span><br><span class="line">sub    $0x8,%rsp</span><br><span class="line">mov    %edx,%eax                # eax=edx</span><br><span class="line">sub    %esi,%eax                # eax-=esi</span><br><span class="line">mov    %eax,%ecx                # ecx=eax</span><br><span class="line">shr    $0x1f,%ecx               # ecx=ecx&gt;&gt;31（逻辑右移，最高位填充0）</span><br><span class="line">add    %ecx,%eax                # eax+=ecx</span><br><span class="line">sar    %eax                     # eax/=2</span><br><span class="line">lea    (%rax,%rsi,1),%ecx       # ecx=rax+rsi</span><br><span class="line">cmp    %edi,%ecx</span><br><span class="line">jle    400ff2 &lt;func4+0x24&gt;      # 如果ecx&lt;=edi，则跳转到400ff2</span><br><span class="line">lea    -0x1(%rcx),%edx          # edx=rcx-1，相当于传给func4的第三个参数为ecx-1</span><br><span class="line">call   400fce &lt;func4&gt;</span><br><span class="line">add    %eax,%eax                # eax*=2</span><br><span class="line">jmp    401007 &lt;func4+0x39&gt;</span><br><span class="line"></span><br><span class="line">400ff2 &lt;func4+0x24&gt;:</span><br><span class="line">mov    $0x0,%eax                # eax=0</span><br><span class="line">cmp    %edi,%ecx</span><br><span class="line">jge    401007 &lt;func4+0x39&gt;      # 如果ecx&gt;=edi，则跳转到401007</span><br><span class="line">lea    0x1(%rcx),%esi           # esi=rcx+1</span><br><span class="line">call   400fce &lt;func4&gt;</span><br><span class="line">lea    0x1(%rax,%rax,1),%eax    # eax=rax*2+1</span><br><span class="line"></span><br><span class="line">401007 &lt;func4+0x39&gt;:</span><br><span class="line">add    $0x8,%rsp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>以上代码的大致逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func4</span><span class="params">(<span class="type">int</span> edi, <span class="type">int</span> eci, <span class="type">int</span> edx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> eax = edx - eci;</span><br><span class="line">    <span class="type">int</span> ecx = eax &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    eax += ecx;</span><br><span class="line">    eax &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    ecx = eax + eci;</span><br><span class="line">    <span class="keyword">if</span> (ecx &lt;= edi)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ecx &gt;= edi)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> func4(edi, ecx + <span class="number">1</span>, edx) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> func4(edi, eci, ecx - <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是更加简明的逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func4</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> eax = c - b;</span><br><span class="line">    <span class="type">int</span> d = (eax + (eax &gt;&gt; <span class="number">31</span>)) / <span class="number">2</span> + b;</span><br><span class="line">    <span class="keyword">if</span> (d == a)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (d &lt; a)</span><br><span class="line">        <span class="keyword">return</span> func4(a, d + <span class="number">1</span>, c) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> func4(a, b, d - <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，当第一个数为7时，func4(a,0,14)==0，即<code>7 0</code>是该题的一个答案。</p><p>至于其他的输入呢？可以写个程序跑一下，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func4( 0,0,14) = 0</span><br><span class="line">func4( 1,0,14) = 0</span><br><span class="line">func4( 2,0,14) = 4</span><br><span class="line">func4( 3,0,14) = 0</span><br><span class="line">func4( 4,0,14) = 2</span><br><span class="line">func4( 5,0,14) = 2</span><br><span class="line">func4( 6,0,14) = 6</span><br><span class="line">func4( 7,0,14) = 0</span><br><span class="line">func4( 8,0,14) = 1</span><br><span class="line">func4( 9,0,14) = 1</span><br><span class="line">func4(10,0,14) = 5</span><br><span class="line">func4(11,0,14) = 1</span><br><span class="line">func4(12,0,14) = 3</span><br><span class="line">func4(13,0,14) = 3</span><br><span class="line">func4(14,0,14) = 7</span><br></pre></td></tr></table></figure><p>因此，以下输入均合法：<code>0 0</code>、<code>1 0</code>、<code>3 0</code>、<code>7 0</code></p><h3 id="phase-5">phase_5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">0000000000401062 &lt;phase_5&gt;:</span><br><span class="line">  401062:    53                       push   %rbx</span><br><span class="line">  401063:    48 83 ec 20              sub    $0x20,%rsp</span><br><span class="line">  401067:    48 89 fb                 mov    %rdi,%rbx</span><br><span class="line">  40106a:    64 48 8b 04 25 28 00     mov    %fs:0x28,%rax</span><br><span class="line">  401071:    00 00 </span><br><span class="line">  401073:    48 89 44 24 18           mov    %rax,0x18(%rsp)</span><br><span class="line">  401078:    31 c0                    xor    %eax,%eax</span><br><span class="line">  40107a:    e8 9c 02 00 00           call   40131b &lt;string_length&gt;</span><br><span class="line">  40107f:    83 f8 06                 cmp    $0x6,%eax</span><br><span class="line">  401082:    74 4e                    je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line">  401084:    e8 b1 03 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  401089:    eb 47                    jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line">  40108b:    0f b6 0c 03              movzbl (%rbx,%rax,1),%ecx</span><br><span class="line">  40108f:    88 0c 24                 mov    %cl,(%rsp)</span><br><span class="line">  401092:    48 8b 14 24              mov    (%rsp),%rdx</span><br><span class="line">  401096:    83 e2 0f                 and    $0xf,%edx</span><br><span class="line">  401099:    0f b6 92 b0 24 40 00     movzbl 0x4024b0(%rdx),%edx</span><br><span class="line">  4010a0:    88 54 04 10              mov    %dl,0x10(%rsp,%rax,1)</span><br><span class="line">  4010a4:    48 83 c0 01              add    $0x1,%rax</span><br><span class="line">  4010a8:    48 83 f8 06              cmp    $0x6,%rax</span><br><span class="line">  4010ac:    75 dd                    jne    40108b &lt;phase_5+0x29&gt;</span><br><span class="line">  4010ae:    c6 44 24 16 00           movb   $0x0,0x16(%rsp)</span><br><span class="line">  4010b3:    be 5e 24 40 00           mov    $0x40245e,%esi</span><br><span class="line">  4010b8:    48 8d 7c 24 10           lea    0x10(%rsp),%rdi</span><br><span class="line">  4010bd:    e8 76 02 00 00           call   401338 &lt;strings_not_equal&gt;</span><br><span class="line">  4010c2:    85 c0                    test   %eax,%eax</span><br><span class="line">  4010c4:    74 13                    je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line">  4010c6:    e8 6f 03 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  4010cb:    0f 1f 44 00 00           nopl   0x0(%rax,%rax,1)</span><br><span class="line">  4010d0:    eb 07                    jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line">  4010d2:    b8 00 00 00 00           mov    $0x0,%eax</span><br><span class="line">  4010d7:    eb b2                    jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class="line">  4010d9:    48 8b 44 24 18           mov    0x18(%rsp),%rax</span><br><span class="line">  4010de:    64 48 33 04 25 28 00     xor    %fs:0x28,%rax</span><br><span class="line">  4010e5:    00 00 </span><br><span class="line">  4010e7:    74 05                    je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class="line">  4010e9:    e8 42 fa ff ff           call   400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">  4010ee:    48 83 c4 20              add    $0x20,%rsp</span><br><span class="line">  4010f2:    5b                       pop    %rbx</span><br><span class="line">  4010f3:    c3                       ret</span><br></pre></td></tr></table></figure><p>代码的解读如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">0000000000401062 &lt;phase_5&gt;:</span><br><span class="line">push   %rbx</span><br><span class="line">sub    $0x20,%rsp</span><br><span class="line">mov    %rdi,%rbx                        # rbx=rdi</span><br><span class="line">mov    %fs:0x28,%rax                    # rax=fs+40，检查溢出的准备</span><br><span class="line">mov    %rax,0x18(%rsp)                  # *(rsp+24)=rax=fs+40，检查溢出的准备</span><br><span class="line">xor    %eax,%eax                        # eax=0</span><br><span class="line">call   40131b &lt;string_length&gt;</span><br><span class="line">cmp    $0x6,%eax</span><br><span class="line">je     4010d2 &lt;phase_5+0x70&gt;            # 如果string_length的返回值为6则跳转</span><br><span class="line">call   40143a &lt;explode_bomb&gt;</span><br><span class="line">jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line"></span><br><span class="line">40108b &lt;phase_5+0x29&gt;:</span><br><span class="line">movzbl (%rbx,%rax,1),%ecx               # ecx=*(rbx+rax)</span><br><span class="line">mov    %cl,(%rsp)                       # *rsp=cl (rsp的低八位变成cl，其它位不变)</span><br><span class="line">mov    (%rsp),%rdx                      # rdx=*rsp</span><br><span class="line">and    $0xf,%edx                        # edx=edx&amp;0xf，保留eax的低4位</span><br><span class="line">movzbl 0x4024b0(%rdx),%edx              # 从0x4024b0+rdx处读取一个字节并赋值给edx</span><br><span class="line">mov    %dl,0x10(%rsp,%rax,1)            # *(rsp+rax+16)=dl，rsp+16指向数组首元素</span><br><span class="line">add    $0x1,%rax                        # rax+=1</span><br><span class="line">cmp    $0x6,%rax</span><br><span class="line">jne    40108b &lt;phase_5+0x29&gt;            # 如果rax!=6则跳转到40108b</span><br><span class="line">movb   $0x0,0x16(%rsp)                  # *(rsp+24)=0</span><br><span class="line">mov    $0x40245e,%esi                   # esi=0x40245e</span><br><span class="line">lea    0x10(%rsp),%rdi                  # rdi=rsp+16</span><br><span class="line">call   401338 &lt;strings_not_equal&gt;</span><br><span class="line">test   %eax,%eax</span><br><span class="line">je     4010d9 &lt;phase_5+0x77&gt;            # 如果strings_not_equal的返回值为0则跳转</span><br><span class="line">call   40143a &lt;explode_bomb&gt;</span><br><span class="line">nopl   0x0(%rax,%rax,1)                 # 无操作</span><br><span class="line">jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line"></span><br><span class="line">4010d2 &lt;phase_5+0x70&gt;:</span><br><span class="line">mov    $0x0,%eax                        # eax=0</span><br><span class="line">jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class="line"></span><br><span class="line">4010d9 &lt;phase_5+0x77&gt;:                  # 这段代码检查缓冲区溢出</span><br><span class="line">mov    0x18(%rsp),%rax                  # rax=*(rsp+24)</span><br><span class="line">xor    %fs:0x28,%rax</span><br><span class="line">je     4010ee &lt;phase_5+0x8c&gt;            # 如果rax与fs+40相同则跳转</span><br><span class="line">call   400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"></span><br><span class="line">4010ee &lt;phase_5+0x8c&gt;:</span><br><span class="line">add    $0x20,%rsp</span><br><span class="line">pop    %rbx</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>以上代码的大致逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">phase_5</span><span class="params">(<span class="type">char</span>* input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(string_length(input)!=<span class="number">6</span>);</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str1=(<span class="type">const</span> <span class="type">char</span>*)<span class="number">0x40245e</span>; <span class="comment">//flyers</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str2=(<span class="type">const</span> <span class="type">char</span>*)<span class="number">0x4024b0</span>; <span class="comment">//maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?</span></span><br><span class="line">    <span class="type">char</span> temp[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i!=<span class="number">6</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[i]=str2[input[i]&amp;<span class="number">0xf</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    temp[<span class="number">6</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(strings_not_equal(str1,temp)!=<span class="number">0</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可知该题需要输入6个字符，以这些字符的ASCII码的后4位作为str2的索引，从str2中取出子字符串。将该子字符串与str1比较，若相同则通过。显然，在str2中，该索引能表示的范围只有maduiersnfotvbyl这一部分(input[i]&amp;0xf&lt;=15)。可以观察到，flyers的六个字母在str2中对应的索引为9,15,14,5,6,7，因此答案有<code>IONEFG</code>(不区分大小写)，或者比较抽象的<code>)/.%&amp;'</code>，等等。</p><h3 id="phase-6">phase_6</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">00000000004010f4 &lt;phase_6&gt;:</span><br><span class="line">  4010f4:    41 56                    push   %r14</span><br><span class="line">  4010f6:    41 55                    push   %r13</span><br><span class="line">  4010f8:    41 54                    push   %r12</span><br><span class="line">  4010fa:    55                       push   %rbp</span><br><span class="line">  4010fb:    53                       push   %rbx</span><br><span class="line">  4010fc:    48 83 ec 50              sub    $0x50,%rsp</span><br><span class="line">  401100:    49 89 e5                 mov    %rsp,%r13</span><br><span class="line">  401103:    48 89 e6                 mov    %rsp,%rsi</span><br><span class="line">  401106:    e8 51 03 00 00           call   40145c &lt;read_six_numbers&gt;</span><br><span class="line">  40110b:    49 89 e6                 mov    %rsp,%r14</span><br><span class="line">  40110e:    41 bc 00 00 00 00        mov    $0x0,%r12d</span><br><span class="line">  401114:    4c 89 ed                 mov    %r13,%rbp</span><br><span class="line">  401117:    41 8b 45 00              mov    0x0(%r13),%eax</span><br><span class="line">  40111b:    83 e8 01                 sub    $0x1,%eax</span><br><span class="line">  40111e:    83 f8 05                 cmp    $0x5,%eax</span><br><span class="line">  401121:    76 05                    jbe    401128 &lt;phase_6+0x34&gt;</span><br><span class="line">  401123:    e8 12 03 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  401128:    41 83 c4 01              add    $0x1,%r12d</span><br><span class="line">  40112c:    41 83 fc 06              cmp    $0x6,%r12d</span><br><span class="line">  401130:    74 21                    je     401153 &lt;phase_6+0x5f&gt;</span><br><span class="line">  401132:    44 89 e3                 mov    %r12d,%ebx</span><br><span class="line">  401135:    48 63 c3                 movslq %ebx,%rax</span><br><span class="line">  401138:    8b 04 84                 mov    (%rsp,%rax,4),%eax</span><br><span class="line">  40113b:    39 45 00                 cmp    %eax,0x0(%rbp)</span><br><span class="line">  40113e:    75 05                    jne    401145 &lt;phase_6+0x51&gt;</span><br><span class="line">  401140:    e8 f5 02 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  401145:    83 c3 01                 add    $0x1,%ebx</span><br><span class="line">  401148:    83 fb 05                 cmp    $0x5,%ebx</span><br><span class="line">  40114b:    7e e8                    jle    401135 &lt;phase_6+0x41&gt;</span><br><span class="line">  40114d:    49 83 c5 04              add    $0x4,%r13</span><br><span class="line">  401151:    eb c1                    jmp    401114 &lt;phase_6+0x20&gt;</span><br><span class="line">  401153:    48 8d 74 24 18           lea    0x18(%rsp),%rsi</span><br><span class="line">  401158:    4c 89 f0                 mov    %r14,%rax</span><br><span class="line">  40115b:    b9 07 00 00 00           mov    $0x7,%ecx</span><br><span class="line">  401160:    89 ca                    mov    %ecx,%edx</span><br><span class="line">  401162:    2b 10                    sub    (%rax),%edx</span><br><span class="line">  401164:    89 10                    mov    %edx,(%rax)</span><br><span class="line">  401166:    48 83 c0 04              add    $0x4,%rax</span><br><span class="line">  40116a:    48 39 f0                 cmp    %rsi,%rax</span><br><span class="line">  40116d:    75 f1                    jne    401160 &lt;phase_6+0x6c&gt;</span><br><span class="line">  40116f:    be 00 00 00 00           mov    $0x0,%esi</span><br><span class="line">  401174:    eb 21                    jmp    401197 &lt;phase_6+0xa3&gt;</span><br><span class="line">  401176:    48 8b 52 08              mov    0x8(%rdx),%rdx</span><br><span class="line">  40117a:    83 c0 01                 add    $0x1,%eax</span><br><span class="line">  40117d:    39 c8                    cmp    %ecx,%eax</span><br><span class="line">  40117f:    75 f5                    jne    401176 &lt;phase_6+0x82&gt;</span><br><span class="line">  401181:    eb 05                    jmp    401188 &lt;phase_6+0x94&gt;</span><br><span class="line">  401183:    ba d0 32 60 00           mov    $0x6032d0,%edx</span><br><span class="line">  401188:    48 89 54 74 20           mov    %rdx,0x20(%rsp,%rsi,2)</span><br><span class="line">  40118d:    48 83 c6 04              add    $0x4,%rsi</span><br><span class="line">  401191:    48 83 fe 18              cmp    $0x18,%rsi</span><br><span class="line">  401195:    74 14                    je     4011ab &lt;phase_6+0xb7&gt;</span><br><span class="line">  401197:    8b 0c 34                 mov    (%rsp,%rsi,1),%ecx</span><br><span class="line">  40119a:    83 f9 01                 cmp    $0x1,%ecx</span><br><span class="line">  40119d:    7e e4                    jle    401183 &lt;phase_6+0x8f&gt;</span><br><span class="line">  40119f:    b8 01 00 00 00           mov    $0x1,%eax</span><br><span class="line">  4011a4:    ba d0 32 60 00           mov    $0x6032d0,%edx</span><br><span class="line">  4011a9:    eb cb                    jmp    401176 &lt;phase_6+0x82&gt;</span><br><span class="line">  4011ab:    48 8b 5c 24 20           mov    0x20(%rsp),%rbx</span><br><span class="line">  4011b0:    48 8d 44 24 28           lea    0x28(%rsp),%rax</span><br><span class="line">  4011b5:    48 8d 74 24 50           lea    0x50(%rsp),%rsi</span><br><span class="line">  4011ba:    48 89 d9                 mov    %rbx,%rcx</span><br><span class="line">  4011bd:    48 8b 10                 mov    (%rax),%rdx</span><br><span class="line">  4011c0:    48 89 51 08              mov    %rdx,0x8(%rcx)</span><br><span class="line">  4011c4:    48 83 c0 08              add    $0x8,%rax</span><br><span class="line">  4011c8:    48 39 f0                 cmp    %rsi,%rax</span><br><span class="line">  4011cb:    74 05                    je     4011d2 &lt;phase_6+0xde&gt;</span><br><span class="line">  4011cd:    48 89 d1                 mov    %rdx,%rcx</span><br><span class="line">  4011d0:    eb eb                    jmp    4011bd &lt;phase_6+0xc9&gt;</span><br><span class="line">  4011d2:    48 c7 42 08 00 00 00     movq   $0x0,0x8(%rdx)</span><br><span class="line">  4011d9:    00 </span><br><span class="line">  4011da:    bd 05 00 00 00           mov    $0x5,%ebp</span><br><span class="line">  4011df:    48 8b 43 08              mov    0x8(%rbx),%rax</span><br><span class="line">  4011e3:    8b 00                    mov    (%rax),%eax</span><br><span class="line">  4011e5:    39 03                    cmp    %eax,(%rbx)</span><br><span class="line">  4011e7:    7d 05                    jge    4011ee &lt;phase_6+0xfa&gt;</span><br><span class="line">  4011e9:    e8 4c 02 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  4011ee:    48 8b 5b 08              mov    0x8(%rbx),%rbx</span><br><span class="line">  4011f2:    83 ed 01                 sub    $0x1,%ebp</span><br><span class="line">  4011f5:    75 e8                    jne    4011df &lt;phase_6+0xeb&gt;</span><br><span class="line">  4011f7:    48 83 c4 50              add    $0x50,%rsp</span><br><span class="line">  4011fb:    5b                       pop    %rbx</span><br><span class="line">  4011fc:    5d                       pop    %rbp</span><br><span class="line">  4011fd:    41 5c                    pop    %r12</span><br><span class="line">  4011ff:    41 5d                    pop    %r13</span><br><span class="line">  401201:    41 5e                    pop    %r14</span><br><span class="line">  401203:    c3                       ret</span><br></pre></td></tr></table></figure><p>代码解读如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">00000000004010f4 &lt;phase_6&gt;:</span><br><span class="line">push   %r14</span><br><span class="line">push   %r13</span><br><span class="line">push   %r12</span><br><span class="line">push   %rbp</span><br><span class="line">push   %rbx</span><br><span class="line">sub    $0x50,%rsp</span><br><span class="line">mov    %rsp,%r13                    # r13=rsp</span><br><span class="line">mov    %rsp,%rsi                    # rsi=rsp</span><br><span class="line">call   40145c &lt;read_six_numbers&gt;    # 传入rdi(input),rsi，返回rax</span><br><span class="line">mov    %rsp,%r14                    # r14=rsp</span><br><span class="line">mov    $0x0,%r12d                   # r12d=0</span><br><span class="line"></span><br><span class="line">401114 &lt;phase_6+0x20&gt;:</span><br><span class="line">mov    %r13,%rbp                    # rbp=r13</span><br><span class="line">mov    0x0(%r13),%eax               # eax=*r13</span><br><span class="line">sub    $0x1,%eax                    # eax--</span><br><span class="line">cmp    $0x5,%eax</span><br><span class="line">jbe    401128 &lt;phase_6+0x34&gt;        # 如果eax&lt;=5则跳转到401128</span><br><span class="line">call   40143a &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line">401128 &lt;phase_6+0x34&gt;:</span><br><span class="line">add    $0x1,%r12d                   # r12d++</span><br><span class="line">cmp    $0x6,%r12d</span><br><span class="line">je     401153 &lt;phase_6+0x5f&gt;        # 如果r12d为6则跳转到401153</span><br><span class="line">mov    %r12d,%ebx                   # ebx=r12d</span><br><span class="line"></span><br><span class="line">401135 &lt;phase_6+0x41&gt;:</span><br><span class="line">movslq %ebx,%rax                    # rax=ebx(ebx符号拓展后赋值给rax)</span><br><span class="line">mov    (%rsp,%rax,4),%eax           # eax=*(rsp+4*rax)</span><br><span class="line">cmp    %eax,0x0(%rbp)</span><br><span class="line">jne    401145 &lt;phase_6+0x51&gt;        # 如果*rbp!=eax则跳转到401145</span><br><span class="line">call   40143a &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line">401145 &lt;phase_6+0x51&gt;:</span><br><span class="line">add    $0x1,%ebx                    # ebx+=1</span><br><span class="line">cmp    $0x5,%ebx</span><br><span class="line">jle    401135 &lt;phase_6+0x41&gt;        # 如果ebx&lt;=5则跳转到401135</span><br><span class="line">add    $0x4,%r13                    # r13+=4</span><br><span class="line">jmp    401114 &lt;phase_6+0x20&gt;</span><br><span class="line"></span><br><span class="line">401153 &lt;phase_6+0x5f&gt;:</span><br><span class="line">lea    0x18(%rsp),%rsi              # rsi=rsp+24</span><br><span class="line">mov    %r14,%rax                    # rax=r14</span><br><span class="line">mov    $0x7,%ecx                    # ecx=7</span><br><span class="line"></span><br><span class="line">401160 &lt;phase_6+0x6c&gt;:</span><br><span class="line">mov    %ecx,%edx                    # edx=ecx</span><br><span class="line">sub    (%rax),%edx                  # edx-=*rax</span><br><span class="line">mov    %edx,(%rax)                  # *rax=edx</span><br><span class="line">add    $0x4,%rax                    # rax+=4</span><br><span class="line">cmp    %rsi,%rax</span><br><span class="line">jne    401160 &lt;phase_6+0x6c&gt;        # 如果rax!=rsi则跳转到401160</span><br><span class="line">mov    $0x0,%esi                    # esi=0</span><br><span class="line">jmp    401197 &lt;phase_6+0xa3&gt;</span><br><span class="line"></span><br><span class="line">401176 &lt;phase_6+0x82&gt;:</span><br><span class="line">mov    0x8(%rdx),%rdx               # rdx=*(rdx+8)</span><br><span class="line">add    $0x1,%eax                    # eax+=1</span><br><span class="line">cmp    %ecx,%eax</span><br><span class="line">jne    401176 &lt;phase_6+0x82&gt;        # 如果eax!=ecx则跳转到401176</span><br><span class="line">jmp    401188 &lt;phase_6+0x94&gt;</span><br><span class="line"></span><br><span class="line">401183 &lt;phase_6+0x8f&gt;:</span><br><span class="line">mov    $0x6032d0,%edx               # edx=0x6032d0</span><br><span class="line"></span><br><span class="line">401188 &lt;phase_6+0x94&gt;:</span><br><span class="line">mov    %rdx,0x20(%rsp,%rsi,2)       # *(rsp+rsi*2+32)=rdx</span><br><span class="line">add    $0x4,%rsi                    # rsi+=4</span><br><span class="line">cmp    $0x18,%rsi</span><br><span class="line">je     4011ab &lt;phase_6+0xb7&gt;        # 如果rsi等于24则跳转到4011ab</span><br><span class="line"></span><br><span class="line">401197 &lt;phase_6+0xa3&gt;:</span><br><span class="line">mov    (%rsp,%rsi,1),%ecx           # ecx=*(rsp+rsi)</span><br><span class="line">cmp    $0x1,%ecx</span><br><span class="line">jle    401183 &lt;phase_6+0x8f&gt;        # 如果ecx&lt;=1则跳转到401183</span><br><span class="line">mov    $0x1,%eax                    # eax=1</span><br><span class="line">mov    $0x6032d0,%edx               # edx=0x6032d0</span><br><span class="line">jmp    401176 &lt;phase_6+0x82&gt;</span><br><span class="line"></span><br><span class="line">4011ab &lt;phase_6+0xb7&gt;:</span><br><span class="line">mov    0x20(%rsp),%rbx              # rbx=*(rsp+32)</span><br><span class="line">lea    0x28(%rsp),%rax              # rax=rsp+40</span><br><span class="line">lea    0x50(%rsp),%rsi              # rsi=rsp+80</span><br><span class="line">mov    %rbx,%rcx                    # rcx=rbx</span><br><span class="line"></span><br><span class="line">4011bd &lt;phase_6+0xc9&gt;:</span><br><span class="line">mov    (%rax),%rdx                  # rdx=*rax</span><br><span class="line">mov    %rdx,0x8(%rcx)               # *(rcx+8)=rdx</span><br><span class="line">add    $0x8,%rax                    # rax+=8</span><br><span class="line">cmp    %rsi,%rax</span><br><span class="line">je     4011d2 &lt;phase_6+0xde&gt;        # 如果rax等于rsi则跳转到4011d2</span><br><span class="line">mov    %rdx,%rcx                    # rcx=rdx</span><br><span class="line">jmp    4011bd &lt;phase_6+0xc9&gt;</span><br><span class="line"></span><br><span class="line">4011d2 &lt;phase_6+0xde&gt;:</span><br><span class="line">movq   $0x0,0x8(%rdx)               # *(rdx+8)=0</span><br><span class="line">mov    $0x5,%ebp                    # ebp=5</span><br><span class="line"></span><br><span class="line">4011df &lt;phase_6+0xeb&gt;:</span><br><span class="line">mov    0x8(%rbx),%rax               # rax=*(rbx+8)</span><br><span class="line">mov    (%rax),%eax                  # eax=*rax</span><br><span class="line">cmp    %eax,(%rbx)</span><br><span class="line">jge    4011ee &lt;phase_6+0xfa&gt;        # 如果*rbx&gt;=eax则跳转到4011ee</span><br><span class="line">call   40143a &lt;explode_bomb&gt;</span><br><span class="line"></span><br><span class="line">4011ee &lt;phase_6+0xfa&gt;:</span><br><span class="line">mov    0x8(%rbx),%rbx               # rbx=*(rbx+8)</span><br><span class="line">sub    $0x1,%ebp                    # ebp-=1</span><br><span class="line">jne    4011df &lt;phase_6+0xeb&gt;        # 当ebp!=0时跳转到4011df</span><br><span class="line">add    $0x50,%rsp</span><br><span class="line">pop    %rbx</span><br><span class="line">pop    %rbp</span><br><span class="line">pop    %r12</span><br><span class="line">pop    %r13</span><br><span class="line">pop    %r14</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>以上解题的时候，发现代码中有一个神秘的地址0x6032d0。对应的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6032d0 4c010000 01000000 e0326000 00000000  L........2`.....</span><br><span class="line">6032e0 a8000000 02000000 f0326000 00000000  .........2`.....</span><br><span class="line">6032f0 9c030000 03000000 00336000 00000000  .........3`.....</span><br><span class="line">603300 b3020000 04000000 10336000 00000000  .........3`.....</span><br><span class="line">603310 dd010000 05000000 20336000 00000000  ........ 3`.....</span><br><span class="line">603320 bb010000 06000000 00000000 00000000  ................</span><br></pre></td></tr></table></figure><p>仔细观察，发现它的值有规律性。每一行都有相同的特征：后半部分是下一行的地址。查看符号表也可发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000000006032d0 g     O .data  0000000000000010              node1</span><br><span class="line">00000000006032e0 g     O .data  0000000000000010              node2</span><br><span class="line">00000000006032f0 g     O .data  0000000000000010              node3</span><br><span class="line">0000000000603300 g     O .data  0000000000000010              node4</span><br><span class="line">0000000000603310 g     O .data  0000000000000010              node5</span><br><span class="line">0000000000603320 g     O .data  0000000000000010              node6</span><br></pre></td></tr></table></figure><p>说明这些node是已经初始化的全局变量，大小为16字节。因此，可以猜测这些应该是链表。这些节点由结构体组成，结构体由数据部分和指针部分组成，且初始化的时候保证后一个指针指向下一个元素。这个数据结构及其初始化可以用C语言表示如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">ptr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;  <span class="comment">// 假设占4字节</span></span><br><span class="line">    <span class="type">int</span> index; <span class="comment">// 假设占4字节</span></span><br><span class="line">    ptr next;  <span class="comment">// 假设占8字节</span></span><br><span class="line">&#125;;</span><br><span class="line">node node6 = &#123;<span class="number">0x01bb</span>, <span class="number">6</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">node node5 = &#123;<span class="number">0x01dd</span>, <span class="number">5</span>, &amp;node6&#125;;</span><br><span class="line">node node4 = &#123;<span class="number">0x02b3</span>, <span class="number">4</span>, &amp;node5&#125;;</span><br><span class="line">node node3 = &#123;<span class="number">0x039c</span>, <span class="number">3</span>, &amp;node4&#125;;</span><br><span class="line">node node2 = &#123;<span class="number">0x00a8</span>, <span class="number">2</span>, &amp;node3&#125;;</span><br><span class="line">node node1 = &#123;<span class="number">0x014c</span>, <span class="number">1</span>, &amp;node2&#125;;</span><br></pre></td></tr></table></figure><p>经过分析，可得到以下的大致的代码逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">ptr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;  <span class="comment">// 假设占4字节</span></span><br><span class="line">    <span class="type">int</span> index; <span class="comment">// 假设占4字节</span></span><br><span class="line">    ptr next;  <span class="comment">// 假设占8字节</span></span><br><span class="line">&#125;;</span><br><span class="line">node node6 = &#123;<span class="number">0x01bb</span>, <span class="number">6</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">node node5 = &#123;<span class="number">0x01dd</span>, <span class="number">5</span>, &amp;node6&#125;;</span><br><span class="line">node node4 = &#123;<span class="number">0x02b3</span>, <span class="number">4</span>, &amp;node5&#125;;</span><br><span class="line">node node3 = &#123;<span class="number">0x039c</span>, <span class="number">3</span>, &amp;node4&#125;;</span><br><span class="line">node node2 = &#123;<span class="number">0x00a8</span>, <span class="number">2</span>, &amp;node3&#125;;</span><br><span class="line">node node1 = &#123;<span class="number">0x014c</span>, <span class="number">1</span>, &amp;node2&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">phase_6</span><span class="params">(<span class="type">char</span> *input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> nums[<span class="number">6</span>];</span><br><span class="line">    read_six_numbers(input, nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入的6个数都要在1到6之间，且6个数互不相同</span></span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] - <span class="number">1</span> &gt; <span class="number">5</span> || nums[<span class="number">0</span>] - <span class="number">1</span> &lt; <span class="number">0</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= <span class="number">5</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i - <span class="number">1</span>] == nums[j])</span><br><span class="line">                explode_bomb();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] - <span class="number">1</span> &gt; <span class="number">5</span> || nums[i] - <span class="number">1</span> &lt; <span class="number">0</span>)</span><br><span class="line">            explode_bomb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个nums[i]用7去减</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        nums[i] = <span class="number">7</span> - nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ptr temp[<span class="number">6</span>];</span><br><span class="line">    ptr edx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使temp[i]指向第nums[i]个节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != <span class="number">6</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            edx = &amp;node1;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j != nums[i]; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                edx = edx-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            edx = &amp;node1;</span><br><span class="line">        &#125;</span><br><span class="line">        temp[i] = edx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ptr rcx = temp[<span class="number">0</span>];</span><br><span class="line">    ptr rdx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照temp[i]的顺序给节点重新排序</span></span><br><span class="line">    <span class="keyword">for</span> (ptr* rax = &amp;temp[<span class="number">1</span>]; rax != &amp;temp[<span class="number">6</span>]; ++rax)</span><br><span class="line">    &#123;</span><br><span class="line">        rdx = *rax;</span><br><span class="line">        rcx-&gt;next = rdx;</span><br><span class="line">        rcx = rdx;</span><br><span class="line">    &#125;</span><br><span class="line">    rdx-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要保证temp[i+1]-&gt;data &lt;= temp[i]-&gt;data</span></span><br><span class="line">    ptr rbx = temp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i != <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rbx-&gt;data &lt; rbx-&gt;next-&gt;data)</span><br><span class="line">            explode_bomb();</span><br><span class="line">        rbx = rbx-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于6个节点的data部分从大到小分别为node3, node4, node5, node6, node1, node2，因此temp[0]到temp[6]分别为node3, node4, node5, node6, node1, node2，进而倒推出最初输入的数字应为<code>4 3 2 1 6 5</code>。</p><h3 id="secret-phase">secret_phase</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line">which to blow yourself up. Have a nice day!</span><br><span class="line">Border relations with Canada have never been better.</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line">That&#x27;s number 2.  Keep going!</span><br><span class="line">0 207</span><br><span class="line">Halfway there!</span><br><span class="line">0 0</span><br><span class="line">So you got that one.  Try this one.</span><br><span class="line">ionefg</span><br><span class="line">Good work!  On to the next...</span><br><span class="line">4 3 2 1 6 5</span><br><span class="line">Congratulations! You&#x27;ve defused the bomb!</span><br></pre></td></tr></table></figure><p>把以上的答案输入进去，最后会提示：Congratulations! You’ve defused the bomb! 似乎解谜已经结束了。不过，如果仔细看<code>bomb.c</code>的话，会发现最后有这么一句话：</p><p>Wow, they got it!  But isn’t something… missing?  Perhaps<br>something they overlooked?  Mua ha ha ha ha!</p><p>好吧，说明还有隐藏关卡。浏览汇编代码，发现 phase_defused 这个函数有端倪：里面藏着对 secret_phase 的调用。因此，还需要分析 phase_defused ，找到进入secret_phase 的方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">00000000004015c4 &lt;phase_defused&gt;:</span><br><span class="line">  4015c4:    48 83 ec 78              sub    $0x78,%rsp</span><br><span class="line">  4015c8:    64 48 8b 04 25 28 00     mov    %fs:0x28,%rax</span><br><span class="line">  4015cf:    00 00 </span><br><span class="line">  4015d1:    48 89 44 24 68           mov    %rax,0x68(%rsp)</span><br><span class="line">  4015d6:    31 c0                    xor    %eax,%eax</span><br><span class="line">  4015d8:    83 3d 81 21 20 00 06     cmpl   $0x6,0x202181(%rip)        # 603760 &lt;num_input_strings&gt;</span><br><span class="line">  4015df:    75 5e                    jne    40163f &lt;phase_defused+0x7b&gt;</span><br><span class="line">  4015e1:    4c 8d 44 24 10           lea    0x10(%rsp),%r8</span><br><span class="line">  4015e6:    48 8d 4c 24 0c           lea    0xc(%rsp),%rcx</span><br><span class="line">  4015eb:    48 8d 54 24 08           lea    0x8(%rsp),%rdx</span><br><span class="line">  4015f0:    be 19 26 40 00           mov    $0x402619,%esi</span><br><span class="line">  4015f5:    bf 70 38 60 00           mov    $0x603870,%edi</span><br><span class="line">  4015fa:    e8 f1 f5 ff ff           call   400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  4015ff:    83 f8 03                 cmp    $0x3,%eax</span><br><span class="line">  401602:    75 31                    jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">  401604:    be 22 26 40 00           mov    $0x402622,%esi</span><br><span class="line">  401609:    48 8d 7c 24 10           lea    0x10(%rsp),%rdi</span><br><span class="line">  40160e:    e8 25 fd ff ff           call   401338 &lt;strings_not_equal&gt;</span><br><span class="line">  401613:    85 c0                    test   %eax,%eax</span><br><span class="line">  401615:    75 1e                    jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">  401617:    bf f8 24 40 00           mov    $0x4024f8,%edi</span><br><span class="line">  40161c:    e8 ef f4 ff ff           call   400b10 &lt;puts@plt&gt;</span><br><span class="line">  401621:    bf 20 25 40 00           mov    $0x402520,%edi</span><br><span class="line">  401626:    e8 e5 f4 ff ff           call   400b10 &lt;puts@plt&gt;</span><br><span class="line">  40162b:    b8 00 00 00 00           mov    $0x0,%eax</span><br><span class="line">  401630:    e8 0d fc ff ff           call   401242 &lt;secret_phase&gt;</span><br><span class="line">  401635:    bf 58 25 40 00           mov    $0x402558,%edi</span><br><span class="line">  40163a:    e8 d1 f4 ff ff           call   400b10 &lt;puts@plt&gt;</span><br><span class="line">  40163f:    48 8b 44 24 68           mov    0x68(%rsp),%rax</span><br><span class="line">  401644:    64 48 33 04 25 28 00     xor    %fs:0x28,%rax</span><br><span class="line">  40164b:    00 00 </span><br><span class="line">  40164d:    74 05                    je     401654 &lt;phase_defused+0x90&gt;</span><br><span class="line">  40164f:    e8 dc f4 ff ff           call   400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">  401654:    48 83 c4 78              add    $0x78,%rsp</span><br><span class="line">  401658:    c3                       ret</span><br><span class="line">  401659:    90                       nop</span><br><span class="line">  40165a:    90                       nop</span><br><span class="line">  40165b:    90                       nop</span><br><span class="line">  40165c:    90                       nop</span><br><span class="line">  40165d:    90                       nop</span><br><span class="line">  40165e:    90                       nop</span><br><span class="line">  40165f:    90                       nop</span><br></pre></td></tr></table></figure><p>进入gdb，检查上面出现的几个地址内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/s 0x402619</span><br><span class="line">0x402619:       &quot;%d %d %s&quot;</span><br><span class="line">(gdb) x/s 0x603870</span><br><span class="line">0x603870 &lt;input_strings+240&gt;:   &quot;&quot;</span><br><span class="line">(gdb) x/s 0x402622</span><br><span class="line">0x402622:       &quot;DrEvil&quot;</span><br><span class="line">(gdb) x/s 0x4024f8</span><br><span class="line">0x4024f8:       &quot;Curses, you&#x27;ve found the secret phase!&quot;</span><br><span class="line">(gdb) x/s 0x402520</span><br><span class="line">0x402520:       &quot;But finding it and solving it are quite different...&quot;</span><br><span class="line">(gdb) x/s 0x402558</span><br><span class="line">0x402558:       &quot;Congratulations! You&#x27;ve defused the bomb!&quot;</span><br></pre></td></tr></table></figure><p>以上代码的大致逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num_input_strings;</span><br><span class="line"><span class="type">void</span> <span class="title function_">phase_defused</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>];     <span class="comment">// 这个大小只是假设</span></span><br><span class="line">    <span class="keyword">if</span> (num_input_strings == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sscanf</span>(<span class="number">0x603870</span>, <span class="string">&quot;%d %d %s&quot;</span>, &amp;a, &amp;b, str) == <span class="number">3</span> &amp;&amp; strings_not_equal(str, <span class="string">&quot;DrEvil&quot;</span>) != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Curses, you&#x27;ve found the secret phase!&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;But finding it and solving it are quite different...&quot;</span>);</span><br><span class="line">            secret_phase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Congratulations! You&#x27;ve defused the bomb!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要解决几个问题：</p><ol><li><code>num_input_strings</code>是什么？</li><li><code>0x603870</code>又是什么？</li><li><code>secret_phase();</code>有什么秘密？</li></ol><p>我们一点一点来看。</p><p>首先是<code>num_input_strings</code>。查看符号表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000000603760 g     O .bss    0000000000000004              num_input_strings</span><br></pre></td></tr></table></figure><p>可知<code>num_input_strings</code>是一个全局变量，程序运行时自动初始化为0。接着在反汇编的结果中搜索所有出现<code># 603760 &lt;num_input_strings&gt;</code>的部分，发现这个函数只在<code>read_line</code>和<code>skip</code>函数中出现。查看源码可知在每次调用phase前都有一句<code>input = read_line();</code>，而<code>skip</code>函数，又会在<code>read_line</code>函数中调用。推测每调用一次<code>read_line()</code>，<code>num_input_strings</code>就会自动加1。经过gdb打断点调试验证，确实是这样。</p><p>然后解决<code>0x603870</code>是什么。上面的gdb提示<code>0x603870</code>在<code>input_strings+240</code>中出现。查看符号表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000000603780 g     O .bss    0000000000000640              input_strings</span><br></pre></td></tr></table></figure><p>可见<code>input_strings</code>是一个全局变量，没有初始值，首元素的地址在0x603780。可以再把之前的答案输入一遍，查看<code>input_strings</code>的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/512c 0x603780</span><br><span class="line">0x603780 &lt;input_strings&gt;:       66 &#x27;B&#x27;  111 &#x27;o&#x27; 114 &#x27;r&#x27; 100 &#x27;d&#x27; 101 &#x27;e&#x27; 114 &#x27;r&#x27; 32 &#x27; &#x27;  114 &#x27;r&#x27;</span><br><span class="line">0x603788 &lt;input_strings+8&gt;:     101 &#x27;e&#x27; 108 &#x27;l&#x27; 97 &#x27;a&#x27;  116 &#x27;t&#x27; 105 &#x27;i&#x27; 111 &#x27;o&#x27; 110 &#x27;n&#x27; 115 &#x27;s&#x27;</span><br><span class="line">0x603790 &lt;input_strings+16&gt;:    32 &#x27; &#x27;  119 &#x27;w&#x27; 105 &#x27;i&#x27; 116 &#x27;t&#x27; 104 &#x27;h&#x27; 32 &#x27; &#x27;  67 &#x27;C&#x27;  97 &#x27;a&#x27;</span><br><span class="line">0x603798 &lt;input_strings+24&gt;:    110 &#x27;n&#x27; 97 &#x27;a&#x27;  100 &#x27;d&#x27; 97 &#x27;a&#x27;  32 &#x27; &#x27;  104 &#x27;h&#x27; 97 &#x27;a&#x27;  118 &#x27;v&#x27;</span><br><span class="line">0x6037a0 &lt;input_strings+32&gt;:    101 &#x27;e&#x27; 32 &#x27; &#x27;  110 &#x27;n&#x27; 101 &#x27;e&#x27; 118 &#x27;v&#x27; 101 &#x27;e&#x27; 114 &#x27;r&#x27; 32 &#x27; &#x27;</span><br><span class="line">0x6037a8 &lt;input_strings+40&gt;:    98 &#x27;b&#x27;  101 &#x27;e&#x27; 101 &#x27;e&#x27; 110 &#x27;n&#x27; 32 &#x27; &#x27;  98 &#x27;b&#x27;  101 &#x27;e&#x27; 116 &#x27;t&#x27;</span><br><span class="line">0x6037b0 &lt;input_strings+48&gt;:    116 &#x27;t&#x27; 101 &#x27;e&#x27; 114 &#x27;r&#x27; 46 &#x27;.&#x27;  0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6037b8 &lt;input_strings+56&gt;:    0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6037c0 &lt;input_strings+64&gt;:    0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6037c8 &lt;input_strings+72&gt;:    0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6037d0 &lt;input_strings+80&gt;:    49 &#x27;1&#x27;  32 &#x27; &#x27;  50 &#x27;2&#x27;  32 &#x27; &#x27;  52 &#x27;4&#x27;  32 &#x27; &#x27;  56 &#x27;8&#x27;  32 &#x27; &#x27;</span><br><span class="line">0x6037d8 &lt;input_strings+88&gt;:    49 &#x27;1&#x27;  54 &#x27;6&#x27;  32 &#x27; &#x27;  51 &#x27;3&#x27;  50 &#x27;2&#x27;  0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6037e0 &lt;input_strings+96&gt;:    0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6037e8 &lt;input_strings+104&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6037f0 &lt;input_strings+112&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6037f8 &lt;input_strings+120&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603800 &lt;input_strings+128&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603808 &lt;input_strings+136&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603810 &lt;input_strings+144&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603818 &lt;input_strings+152&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603820 &lt;input_strings+160&gt;:   48 &#x27;0&#x27;  32 &#x27; &#x27;  50 &#x27;2&#x27;  48 &#x27;0&#x27;  55 &#x27;7&#x27;  0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603828 &lt;input_strings+168&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603830 &lt;input_strings+176&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603838 &lt;input_strings+184&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603840 &lt;input_strings+192&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603848 &lt;input_strings+200&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603850 &lt;input_strings+208&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603858 &lt;input_strings+216&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603860 &lt;input_strings+224&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603868 &lt;input_strings+232&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603870 &lt;input_strings+240&gt;:   55 &#x27;7&#x27;  32 &#x27; &#x27;  48 &#x27;0&#x27;  0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603878 &lt;input_strings+248&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603880 &lt;input_strings+256&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603888 &lt;input_strings+264&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603890 &lt;input_strings+272&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603898 &lt;input_strings+280&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038a0 &lt;input_strings+288&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038a8 &lt;input_strings+296&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038b0 &lt;input_strings+304&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038b8 &lt;input_strings+312&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038c0 &lt;input_strings+320&gt;:   105 &#x27;i&#x27; 111 &#x27;o&#x27; 110 &#x27;n&#x27; 101 &#x27;e&#x27; 102 &#x27;f&#x27; 103 &#x27;g&#x27; 0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038c8 &lt;input_strings+328&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038d0 &lt;input_strings+336&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038d8 &lt;input_strings+344&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038e0 &lt;input_strings+352&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038e8 &lt;input_strings+360&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038f0 &lt;input_strings+368&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x6038f8 &lt;input_strings+376&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603900 &lt;input_strings+384&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603908 &lt;input_strings+392&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603910 &lt;input_strings+400&gt;:   52 &#x27;4&#x27;  32 &#x27; &#x27;  51 &#x27;3&#x27;  32 &#x27; &#x27;  50 &#x27;2&#x27;  32 &#x27; &#x27;  49 &#x27;1&#x27;  32 &#x27; &#x27;</span><br><span class="line">0x603918 &lt;input_strings+408&gt;:   54 &#x27;6&#x27;  32 &#x27; &#x27;  53 &#x27;5&#x27;  0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603920 &lt;input_strings+416&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603928 &lt;input_strings+424&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603930 &lt;input_strings+432&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603938 &lt;input_strings+440&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603940 &lt;input_strings+448&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603948 &lt;input_strings+456&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603950 &lt;input_strings+464&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603958 &lt;input_strings+472&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603960 &lt;input_strings+480&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603968 &lt;input_strings+488&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603970 &lt;input_strings+496&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br><span class="line">0x603978 &lt;input_strings+504&gt;:   0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;        0 &#x27;\000&#x27;</span><br></pre></td></tr></table></figure><p>发现，0x603870不正是phase_4输入的答案嘛！所以现在明了了：要进入secret_phase，需要在phase_4输入的结尾追加<code>DrEvil</code>，也就是说phase_4输入：<code>0 0 DrEvil</code>或<code>1 0 DrEvil</code>或<code>3 0 DrEvil</code>或<code>7 0 DrEvil</code>。</p><p>接下来开始分析<code>secret_phase</code>的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">0000000000401242 &lt;secret_phase&gt;:</span><br><span class="line">  401242:    53                       push   %rbx</span><br><span class="line">  401243:    e8 56 02 00 00           call   40149e &lt;read_line&gt;</span><br><span class="line">  401248:    ba 0a 00 00 00           mov    $0xa,%edx</span><br><span class="line">  40124d:    be 00 00 00 00           mov    $0x0,%esi</span><br><span class="line">  401252:    48 89 c7                 mov    %rax,%rdi</span><br><span class="line">  401255:    e8 76 f9 ff ff           call   400bd0 &lt;strtol@plt&gt;</span><br><span class="line">  40125a:    48 89 c3                 mov    %rax,%rbx</span><br><span class="line">  40125d:    8d 40 ff                 lea    -0x1(%rax),%eax</span><br><span class="line">  401260:    3d e8 03 00 00           cmp    $0x3e8,%eax</span><br><span class="line">  401265:    76 05                    jbe    40126c &lt;secret_phase+0x2a&gt;</span><br><span class="line">  401267:    e8 ce 01 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  40126c:    89 de                    mov    %ebx,%esi</span><br><span class="line">  40126e:    bf f0 30 60 00           mov    $0x6030f0,%edi</span><br><span class="line">  401273:    e8 8c ff ff ff           call   401204 &lt;fun7&gt;</span><br><span class="line">  401278:    83 f8 02                 cmp    $0x2,%eax</span><br><span class="line">  40127b:    74 05                    je     401282 &lt;secret_phase+0x40&gt;</span><br><span class="line">  40127d:    e8 b8 01 00 00           call   40143a &lt;explode_bomb&gt;</span><br><span class="line">  401282:    bf 38 24 40 00           mov    $0x402438,%edi</span><br><span class="line">  401287:    e8 84 f8 ff ff           call   400b10 &lt;puts@plt&gt;</span><br><span class="line">  40128c:    e8 33 03 00 00           call   4015c4 &lt;phase_defused&gt;</span><br><span class="line">  401291:    5b                       pop    %rbx</span><br><span class="line">  401292:    c3                       ret</span><br><span class="line">  401293:    90                       nop</span><br><span class="line">  401294:    90                       nop</span><br><span class="line">  401295:    90                       nop</span><br><span class="line">  401296:    90                       nop</span><br><span class="line">  401297:    90                       nop</span><br><span class="line">  401298:    90                       nop</span><br><span class="line">  401299:    90                       nop</span><br><span class="line">  40129a:    90                       nop</span><br><span class="line">  40129b:    90                       nop</span><br><span class="line">  40129c:    90                       nop</span><br><span class="line">  40129d:    90                       nop</span><br><span class="line">  40129e:    90                       nop</span><br><span class="line">  40129f:    90                       nop</span><br></pre></td></tr></table></figure><p>代码大致逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">secret_phase</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    input = read_line();</span><br><span class="line">    <span class="type">int</span> num = strtol(input, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    num--;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1000</span> || num &lt; <span class="number">0</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">if</span> (fun7(num, <span class="number">0x6030f0</span>) != <span class="number">2</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wow! You&#x27;ve defused the secret stage!&quot;</span>);</span><br><span class="line">    phase_defused();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，需要输入一个0到1000的数字，并且要使fun7的返回值为2。上述代码还出现了0x6030f0这个地址。查符号表可知，0x6030f0是一个叫作n1的东西，大小为24字节，猜测可能是一个特殊的节点。以下是在符号表中查找到的类似名称的节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">00000000006030f0 g     O .data  0000000000000018              n1</span><br><span class="line">0000000000603110 g     O .data  0000000000000018              n21</span><br><span class="line">0000000000603130 g     O .data  0000000000000018              n22</span><br><span class="line">0000000000603190 g     O .data  0000000000000018              n31</span><br><span class="line">0000000000603150 g     O .data  0000000000000018              n32</span><br><span class="line">0000000000603170 g     O .data  0000000000000018              n33</span><br><span class="line">00000000006031b0 g     O .data  0000000000000018              n34</span><br><span class="line">00000000006031f0 g     O .data  0000000000000018              n41</span><br><span class="line">0000000000603250 g     O .data  0000000000000018              n42</span><br><span class="line">0000000000603270 g     O .data  0000000000000018              n43</span><br><span class="line">0000000000603230 g     O .data  0000000000000018              n44</span><br><span class="line">00000000006031d0 g     O .data  0000000000000018              n45</span><br><span class="line">0000000000603290 g     O .data  0000000000000018              n46</span><br><span class="line">0000000000603210 g     O .data  0000000000000018              n47</span><br><span class="line">00000000006032b0 g     O .data  0000000000000018              n48</span><br></pre></td></tr></table></figure><p>这是n1以下区域的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">6030f0 24000000 00000000 10316000 00000000  $........1`.....</span><br><span class="line">603100 30316000 00000000 00000000 00000000  01`.............</span><br><span class="line">603110 08000000 00000000 90316000 00000000  .........1`.....</span><br><span class="line">603120 50316000 00000000 00000000 00000000  P1`.............</span><br><span class="line">603130 32000000 00000000 70316000 00000000  2.......p1`.....</span><br><span class="line">603140 b0316000 00000000 00000000 00000000  .1`.............</span><br><span class="line">603150 16000000 00000000 70326000 00000000  ........p2`.....</span><br><span class="line">603160 30326000 00000000 00000000 00000000  02`.............</span><br><span class="line">603170 2d000000 00000000 d0316000 00000000  -........1`.....</span><br><span class="line">603180 90326000 00000000 00000000 00000000  .2`.............</span><br><span class="line">603190 06000000 00000000 f0316000 00000000  .........1`.....</span><br><span class="line">6031a0 50326000 00000000 00000000 00000000  P2`.............</span><br><span class="line">6031b0 6b000000 00000000 10326000 00000000  k........2`.....</span><br><span class="line">6031c0 b0326000 00000000 00000000 00000000  .2`.............</span><br><span class="line">6031d0 28000000 00000000 00000000 00000000  (...............</span><br><span class="line">6031e0 00000000 00000000 00000000 00000000  ................</span><br><span class="line">6031f0 01000000 00000000 00000000 00000000  ................</span><br><span class="line">603200 00000000 00000000 00000000 00000000  ................</span><br><span class="line">603210 63000000 00000000 00000000 00000000  c...............</span><br><span class="line">603220 00000000 00000000 00000000 00000000  ................</span><br><span class="line">603230 23000000 00000000 00000000 00000000  #...............</span><br><span class="line">603240 00000000 00000000 00000000 00000000  ................</span><br><span class="line">603250 07000000 00000000 00000000 00000000  ................</span><br><span class="line">603260 00000000 00000000 00000000 00000000  ................</span><br><span class="line">603270 14000000 00000000 00000000 00000000  ................</span><br><span class="line">603280 00000000 00000000 00000000 00000000  ................</span><br><span class="line">603290 2f000000 00000000 00000000 00000000  /...............</span><br><span class="line">6032a0 00000000 00000000 00000000 00000000  ................</span><br><span class="line">6032b0 e9030000 00000000 00000000 00000000  ................</span><br><span class="line">6032c0 00000000 00000000 00000000 00000000  ................</span><br></pre></td></tr></table></figure><p>经过观察，发现这是一个结构体，由数据和两个指针组成。大致情况如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Leaf</span> <span class="title">leaf</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Leaf</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Leaf</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Leaf</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">leaf n1  = &#123;  <span class="number">36</span>, &amp;n21, &amp;n22&#125;;</span><br><span class="line">leaf n21 = &#123;   <span class="number">8</span>, &amp;n31, &amp;n32&#125;;</span><br><span class="line">leaf n22 = &#123;  <span class="number">50</span>, &amp;n33, &amp;n34&#125;;</span><br><span class="line">leaf n31 = &#123;   <span class="number">6</span>, &amp;n41, &amp;n42&#125;;</span><br><span class="line">leaf n32 = &#123;  <span class="number">22</span>, &amp;n43, &amp;n44&#125;;</span><br><span class="line">leaf n33 = &#123;  <span class="number">45</span>, &amp;n45, &amp;n46&#125;;</span><br><span class="line">leaf n34 = &#123; <span class="number">107</span>, &amp;n47, &amp;n48&#125;;</span><br><span class="line">leaf n41 = &#123;   <span class="number">1</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">leaf n42 = &#123;   <span class="number">7</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">leaf n43 = &#123;  <span class="number">20</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">leaf n44 = &#123;  <span class="number">35</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">leaf n45 = &#123;  <span class="number">40</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">leaf n46 = &#123;  <span class="number">47</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">leaf n47 = &#123;  <span class="number">99</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">leaf n48 = &#123;<span class="number">1001</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br></pre></td></tr></table></figure><p>接着分析fun7的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">0000000000401204 &lt;fun7&gt;:</span><br><span class="line">  401204:    48 83 ec 08              sub    $0x8,%rsp</span><br><span class="line">  401208:    48 85 ff                 test   %rdi,%rdi</span><br><span class="line">  40120b:    74 2b                    je     401238 &lt;fun7+0x34&gt;</span><br><span class="line">  40120d:    8b 17                    mov    (%rdi),%edx</span><br><span class="line">  40120f:    39 f2                    cmp    %esi,%edx</span><br><span class="line">  401211:    7e 0d                    jle    401220 &lt;fun7+0x1c&gt;</span><br><span class="line">  401213:    48 8b 7f 08              mov    0x8(%rdi),%rdi</span><br><span class="line">  401217:    e8 e8 ff ff ff           call   401204 &lt;fun7&gt;</span><br><span class="line">  40121c:    01 c0                    add    %eax,%eax</span><br><span class="line">  40121e:    eb 1d                    jmp    40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401220:    b8 00 00 00 00           mov    $0x0,%eax</span><br><span class="line">  401225:    39 f2                    cmp    %esi,%edx</span><br><span class="line">  401227:    74 14                    je     40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401229:    48 8b 7f 10              mov    0x10(%rdi),%rdi</span><br><span class="line">  40122d:    e8 d2 ff ff ff           call   401204 &lt;fun7&gt;</span><br><span class="line">  401232:    8d 44 00 01              lea    0x1(%rax,%rax,1),%eax</span><br><span class="line">  401236:    eb 05                    jmp    40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401238:    b8 ff ff ff ff           mov    $0xffffffff,%eax</span><br><span class="line">  40123d:    48 83 c4 08              add    $0x8,%rsp</span><br><span class="line">  401241:    c3                       ret</span><br></pre></td></tr></table></figure><p>其大致逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun7</span><span class="params">(leaf *a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a-&gt;data &gt; b)</span><br><span class="line">        <span class="keyword">return</span> fun7(a-&gt;left, b) * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a-&gt;data == b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * fun7(a-&gt;right, b) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以写个程序遍历0~1000，暴力法求出结果。遍历出来的结果为<code>20</code>或<code>22</code>。</p><h2 id="完结撒花">完结撒花</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line">which to blow yourself up. Have a nice day!</span><br><span class="line">Border relations with Canada have never been better.</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line">That&#x27;s number 2.  Keep going!</span><br><span class="line">0 207</span><br><span class="line">Halfway there!</span><br><span class="line">0 0 DrEvil</span><br><span class="line">So you got that one.  Try this one.</span><br><span class="line">ionefg</span><br><span class="line">Good work!  On to the next...</span><br><span class="line">4 3 2 1 6 5</span><br><span class="line">Curses, you&#x27;ve found the secret phase!</span><br><span class="line">But finding it and solving it are quite different...</span><br><span class="line">20</span><br><span class="line">Wow! You&#x27;ve defused the secret stage!</span><br><span class="line">Congratulations! You&#x27;ve defused the bomb!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP Data Lab 学习记录</title>
      <link href="/posts/1a133b13.html"/>
      <url>/posts/1a133b13.html</url>
      
        <content type="html"><![CDATA[<h2 id="开始之前">开始之前</h2><h3 id="下载代码文件">下载代码文件</h3><p>CSAPP的project可以从<a href="https://csapp.cs.cmu.edu/3e/labs.html">官方网站</a>上下载。其中project代码文件在<a href="https://csapp.cs.cmu.edu/3e/datalab-handout.tar">Self-Study Handout</a>链接那里。使用如下命令下载datalab文件，并解压进入目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://csapp.cs.cmu.edu/3e/datalab-handout.tar --no-check-certificate</span><br><span class="line">tar -xvf datalab-handout.tar</span><br><span class="line"><span class="built_in">cd</span> datalab-handout/</span><br></pre></td></tr></table></figure><p>进入这个目录后，可以看到一个名为 bits.c 的文件。这个文件是要去完成的project，所有的题目都在这个文件中。</p><h3 id="检查答案正确性并评分">检查答案正确性并评分</h3><p>当修改好 bits.c 文件后，可以用以下方式检验答案正确性：</p><ol><li><p>检查 bits.c 的代码风格<br>在命令行中使用<code>./dlc bits.c</code>或者<code>./dlc -e bits.c</code>检查。</p><ul><li>对于<code>./dlc bits.c</code>命令，如果 bits.c 没有问题，将什么也不会输出。</li><li>对于<code>./dlc -e bits.c</code>命令，程序将会打印每个函数所用的操作符号数，当然，不算括号、等号。</li></ul></li><li><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br><span class="line">make btest</span><br><span class="line"><span class="comment"># 或者直接一步到位，使用 make clean &amp;&amp; make btest</span></span><br></pre></td></tr></table></figure><p>注意：修改 bits.c 文件后，需要重复以上步骤重新编译。</p><p>当然，不用<code>make btest</code>而是用<code>make</code>命令也是可以的，只不过会比<code>make btest</code>多生成 fshow 和 ishow 两个文件。这两个文件是帮助文件，可以帮忙写出某个数的其它表示。比如<code>./ishow 0x27</code>将会输出<code>Hex = 0x00000027,       Signed = 39,    Unsigned = 39</code>。具体用法可见 datalab-handout 文件夹下 README 文件中的例子。</p></li><li><p>检查 bits.c 中函数的正确性</p><ul><li>使用<code>./btest</code>检查所有函数的正确性并给出总得分（注意：btest检查不出代码风格上的错误）</li><li>使用<code>./btest -f &lt;function-name&gt;</code>检查某一函数的正确性，如<code>./btest -f bitXor</code>检查 bitXor 函数的正确性</li><li>关于 btest 的其他用法，可以在命令行中输入<code>./btest -h</code>查看。</li></ul></li><li><p>评分<br>当完成 bits.c 中全部题目时，可在命令行中输入<code>./driver.pl</code>评分，会输出一个最终分数。</p></li></ol><h2 id="题目的个人解答">题目的个人解答</h2><h3 id="bitXor">bitXor</h3><p>题目要求：只使用 ~ 和 &amp; 实现异或。不使用超过14个运算符。</p><p>思路：由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>y</mi><mo>=</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mi>y</mi><mo>+</mo><mi>x</mi><mover accent="true"><mi>y</mi><mo>ˉ</mo></mover><mo>=</mo><mover accent="true"><mover accent="true"><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mi>y</mi><mo>+</mo><mi>x</mi><mover accent="true"><mi>y</mi><mo>ˉ</mo></mover></mrow><mo stretchy="true">‾</mo></mover><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mrow><mover accent="true"><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mi>y</mi></mrow><mo stretchy="true">‾</mo></mover><mo>⋅</mo><mover accent="true"><mrow><mi>x</mi><mover accent="true"><mi>y</mi><mo>ˉ</mo></mover></mrow><mo stretchy="true">‾</mo></mover></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">x\oplus y=\bar{x}y+x\bar{y}=\overline{\overline{\bar{x}y+x\bar{y}}}=\overline{\overline{\bar{x}y} \cdot \overline{x\bar{y}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7622em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1778em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span style="top:-3.7033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span style="top:-3.9033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1622em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.6878em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span style="top:-3.6878em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span style="top:-3.8878em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></p><p>可得以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bitXor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ~(~(x&amp;~y)&amp;~(~x&amp;y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>y</mi><mo>=</mo><mover accent="true"><mrow><mi>x</mi><mo>⊙</mo><mi>y</mi></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mover accent="true"><mi>y</mi><mo>ˉ</mo></mover><mo>+</mo><mi>x</mi><mi>y</mi></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mover accent="true"><mi>y</mi><mo>ˉ</mo></mover></mrow><mo stretchy="true">‾</mo></mover><mo>⋅</mo><mover accent="true"><mrow><mi>x</mi><mi>y</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">x\oplus y=\overline{x\odot y}=\overline{\bar{x}\bar{y}+xy}=\overline{\bar{x}\bar{y}}\cdot \overline{xy}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9778em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.7033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9778em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.7033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9622em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span><span style="top:-3.6878em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></p><p>可得以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bitXor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ~(~x&amp;~y)&amp;~(x&amp;y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：以上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding="application/x-tex">\oplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">⊕</span></span></span></span>为异或符号，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊙</mo></mrow><annotation encoding="application/x-tex">\odot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">⊙</span></span></span></span>为同或符号。</p><h3 id="tmin">tmin</h3><p>题目要求：返回最小的补码，即 0x80000000 。只允许使用 ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; 来实现。使用的运算符个数不超过4。</p><p>思路：使用移位运算符即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">tmin</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isTmax">isTmax</h3><p>题目要求：如果 x 是最大的补码数 (即 0x7fffffff )，则返回1，否则返回0。只允许使用 ! ~ &amp; ^ | + 来实现。使用的运算符个数不超过10。</p><p>思路：真的有种想套用第2题的解法的想法，先用移位运算符 &lt;&lt; 得到 tmin，再取反得到 tmax。可惜题目不给用 &lt;&lt; 。</p><p>这里用的方法是 0x7fffffff 自身的特点：0x7fffffff 反码为 0x80000000 ，两者恰好相差1，所以只需要判断 x+1 与 ~x 相等就行了。而两个数相等又可以用异或来判断。于是得到以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> a=~x;</span><br><span class="line">    <span class="type">int</span> b=x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> !(a^b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交，怎么没过？看一下错误提示，发现一条信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Test isTmax(-1[0xffffffff]) failed...</span><br><span class="line">...Gives 1[0x1]. Should be 0[0x0]</span><br></pre></td></tr></table></figure><p>原来，-1的反码为0，-1加1也等于0，所以需要把-1排除掉（比如检测 ~x 是否为0）。修正后的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> a=~x;</span><br><span class="line">    <span class="type">int</span> b=x+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> nEqual=a^b;</span><br><span class="line">    <span class="type">int</span> isException=!a;</span><br><span class="line">    <span class="keyword">return</span> (!isException)&amp;(!nEqual);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次就成功通过了。</p><details class="toggle" ><summary class="toggle-button" style="">还有可能存在其它满足~x=x+1的数字吗？</summary><div class="toggle-content"><p>我们知道，~x 满足 x+(~x)=-1。</p><p>如果 x+1 溢出了，x 只有可能为0xffffffff，即-1，刚才已经考虑过了。</p><p>如果 x+1 没有溢出，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>⋅</mo><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">x+(x+1)=-1+n\cdot 2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo>−</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>⋅</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">x=-1+n\cdot 2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span>。考虑到 x 的范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>⩽</mo><mi>x</mi><mo>⩽</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-2^{31}\leqslant x\leqslant 2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9508em;vertical-align:-0.1367em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7733em;vertical-align:-0.1367em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，因此 x 只有可能为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>(x+1 溢出，不算)</p><p>由此可见，确实不存在其它满足~x=x+1的数字了。</p></div></details><h3 id="allOddBits">allOddBits</h3><p>题目要求：如果 x 的所有奇数位为1 (即1x1x1x1x…的形式，其中x表示0或1)，则返回1，否则返回0。只允许使用 ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; 来实现。使用的运算符个数不超过12。</p><p>思路：这是一道检测位的题目，可用“或”来实现。如果 x 符合题目要求，那么 x|0x55555555=0xffffffff，只需要构造出0x55555555即可。由于题目只允许使用0~255间的整数，因此可以用移位运算符来构造：0x55+(0x55&lt;&lt;8)=0x5555，0x5555+(0x5555&lt;&lt;16)=0x55555555。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">allOddBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">85</span>+(<span class="number">85</span>&lt;&lt;<span class="number">8</span>);</span><br><span class="line">    <span class="type">int</span> num2=num+(num&lt;&lt;<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> !((num2|x)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="negate">negate</h3><p>题目要求：返回-x。只允许使用 ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; 来实现。使用的运算符个数不超过5。</p><p>思路：-x=~x+1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">negate</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ~x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isAsciiDigit">isAsciiDigit</h3><p>题目要求：如果 x 的ASCII码满足 0x30 &lt;= x &lt;= 0x39，返回1。只允许使用 ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; 来实现。使用的运算符个数不超过15。</p><p>思路：当0x30 &lt;= x &lt;= 0x39时，x-30&gt;=0 , 39-x&gt;=0，即 x-30 , 39-x 的符号位均为0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isAsciiDigit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp1=x+(~<span class="number">0x2f</span>);        <span class="comment">// 相当于temp1=x-0x30;</span></span><br><span class="line">    <span class="type">int</span> temp2=<span class="number">0x3a</span>+(~x);        <span class="comment">// 相当于temp2=0x39-x;</span></span><br><span class="line">    <span class="type">int</span> sign1=(temp1&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sign2=(temp2&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (!sign1)&amp;(!sign2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="conditional">conditional</h3><p>题目要求：返回x ? y : z。只允许使用 ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; 来实现。使用的运算符个数不超过16。</p><p>思路：依题意当 x 不为0时返回 y ，当 x 为0时返回 z 。假设返回 y，只需返回 (y&amp;0xffffffff)+(z&amp;0x0)；假设返回 z，则返回 (y&amp;0x0)+(z&amp;0xffffffff)，所以想办法让 x 为0和1时对应0xffffffff和0x0即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">conditional</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp=!x;</span><br><span class="line">    temp=~temp+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 当x=0时temp为0xffffffff，否则temp为0</span></span><br><span class="line">    <span class="comment">// 写成 int temp=~(!x)+1; 也是可以通过的，不过编译器会有warning。</span></span><br><span class="line">    <span class="keyword">return</span> (y&amp;~temp)+(z&amp;temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isLessOrEqual">isLessOrEqual</h3><p>题目要求：如果 x&lt;=y，返回1，否则返回0。只允许使用 ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; 来实现。使用的运算符个数不超过24。</p><p>思路：一种直接的想法是先计算 y-x，再检查符号位。y-x 的计算可以用反码算得。如果符号位是1就说明 x&gt;y。但是这种方法有一个问题：万一 y 是一个很大的正数，而 x 是一个很小的负数，明明 y-x 应该为正数，但在实际情况中却因为溢出而变成了负数！所以应该分两种情况讨论：</p><ul><li>x 与 y 的符号位不同：返回 x 的符号位</li><li>x 与 y 的符号位相同：返回 y-x 的符号位取反后的值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isLessOrEqual</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="type">int</span> xSign=(x&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ySign=(y&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> nEqual=xSign^ySign;</span><br><span class="line">    <span class="type">int</span> minus=(~x)+<span class="number">1</span>+y;</span><br><span class="line">    <span class="type">int</span> minusSign=!((minus&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (nEqual&amp;xSign)+((!nEqual)&amp;minusSign);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="logicalNeg">logicalNeg</h3><p>题目要求：使用 ~ &amp; ^ | + &lt;&lt; &gt;&gt; 运算符实现 ! 。使用的运算符个数不超过12。</p><p>思路：这个问题要将0变成1，而非零的数变成0。这就要求要找到一个办法将0和非零的数区分开。注意到0是唯一一个满足 x==-x 的数，也就是说，经过~x+1这一运算，0的符号位仍旧不变，而其它的符号位变了。可以利用这点来实现 !。由此可以得到以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">logicalNeg</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp=~x+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> beginSign=(x&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;        <span class="comment">// x 的符号位</span></span><br><span class="line">    <span class="type">int</span> endSign=(temp&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;       <span class="comment">// -x 的符号位</span></span><br><span class="line">    <span class="type">int</span> nZero=beginSign^endSign;</span><br><span class="line">    <span class="comment">// 当 x 的符号位与 -x 不同时，x不为0，即 nZero=1；否则 nZero=0。</span></span><br><span class="line">    <span class="keyword">return</span> ~nZero+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接这样提交的话，会发现答案是错的。错在哪呢？原来，在利用 x=-x 时，我们忽略了一个重要例外：当 x=0x80000000 时，~x 也等于 0x80000000，此时 ~x+1 等于 0x80000001，这个时候 x 的符号位也不变。注意到这个时候 x 和 -x 的符号位都为1，因此只需将 <code>int nZero=beginSign^endSign;</code> 改为 <code>int nZero=beginSign|endSign;</code> 即可。修正后的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">logicalNeg</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp=~x+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> beginSign=(x&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> endSign=(temp&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> nZero=beginSign|endSign;</span><br><span class="line">    <span class="keyword">return</span> ~nZero+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就可以顺利通过了。</p><h3 id="howManyBits">howManyBits</h3><p>题目要求：返回表示有符号数 x 所需的最小的位数。只允许使用 ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; 来实现。使用的运算符个数不超过90。</p><p>思路：首先要明白题目的意思。1位数可以表示-1,0，2位数可以表示-2,-1,0,1，3位数可以表示-4~3……也就是说，n位数可以表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">-2^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{n-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 之间的数。</p><p>为了像正数一样处理负数，可先将负数转化为它的补码（易知表示 x 和表示 ~x 所需要的位数是一样的）。</p><p>在这个问题中，可以采用一种二分的思想来计算位数。<br>对于一个32位的数，先判断前16位是否全为0。如果不是，知道至少需要用16位表示，并进一步分析前16位；否则进一步分析后16位。<br>对于一个16位的数，先判断前8位是否全为0。如果不是，表示所需的位数+8，并进一步分析前8位；否则进一步分析后8位。<br>以此类推，最终可以确定表示所需的位数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> total=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> isNegate=~((x&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> judge=(isNegate&amp;~x)+(~isNegate&amp;x);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt16=!(!(judge&gt;&gt;<span class="number">16</span>))&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> check16=judge&gt;&gt;cnt16;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt8=!(!(check16&gt;&gt;<span class="number">8</span>))&lt;&lt;<span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> check8=check16&gt;&gt;cnt8;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt4=!(!(check8&gt;&gt;<span class="number">4</span>))&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> check4=check8&gt;&gt;cnt4;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt2=!(!(check4&gt;&gt;<span class="number">2</span>))&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> check2=check4&gt;&gt;cnt2;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt1=!(!(check2&gt;&gt;<span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> check1=check2&gt;&gt;cnt1;</span><br><span class="line"></span><br><span class="line">    total=cnt16+cnt8+cnt4+cnt2+cnt1+check1+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatScale2">floatScale2</h3><p>题目要求：将浮点数乘2。允许使用整型、无符号型的运算符，以及 &amp;&amp; || if while 。运算符个数不超过30。</p><p>思路：开始之前，还是有必要回顾一下单精度浮点数的表示。</p><p><img src="../img/posts/float.svg" alt="单精度浮点数表示"></p><p>一般情况下 ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">E\neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo mathvariant="normal">≠</mo><mn>255</mn></mrow><annotation encoding="application/x-tex">E\neq 255</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">255</span></span></span></span> )，这个浮点数表示的数字为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mo>⋅</mo><mo stretchy="false">(</mo><mn>1.</mn><mi>F</mi><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>E</mi><mo>−</mo><mn>127</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(-1)^S\cdot (1.F)\cdot (2^{E-127})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1.</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mbin mtight">−</span><span class="mord mtight">127</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，但是有几个例外：</p><ul><li>当 E=0 时，为非规格化的浮点数。特别地，当 S, E, F 都为0时表示浮点数0.0</li><li>当 E=0xff 且 F=0 时表示无穷大</li><li>当 E=0xff 且 F 不为0时表示 NaN</li></ul><p>因此，一般情况下，若浮点数不溢出，将指数部分加1即可；若溢出，还需要额外将尾数部分置为0。非规格化的数保留 S 不变并将剩余部分乘以2。几个特殊的数值保留原样返回即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="title function_">floatScale2</span><span class="params">(<span class="type">unsigned</span> uf)</span> &#123;</span><br><span class="line">    <span class="type">int</span> e=(uf&gt;&gt;<span class="number">23</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">    <span class="type">int</span> s=uf&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line">    <span class="type">int</span> setF=(<span class="number">-1</span>)&lt;&lt;<span class="number">23</span>;</span><br><span class="line">    <span class="type">int</span> multi2=<span class="number">1</span>&lt;&lt;<span class="number">23</span>;</span><br><span class="line">    <span class="comment">// 直接返回inf和NaN</span></span><br><span class="line">    <span class="keyword">if</span>(e==<span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">return</span> uf;</span><br><span class="line">    <span class="comment">// 如果是0，S不变，其余部分乘2</span></span><br><span class="line">    <span class="keyword">if</span>(e==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        uf=(uf*<span class="number">2</span>)^s;</span><br><span class="line">        <span class="keyword">return</span> uf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 指数部分加1</span></span><br><span class="line">    uf=uf+multi2;</span><br><span class="line">    <span class="comment">// 若乘2后溢出，输出inf</span></span><br><span class="line">    <span class="keyword">if</span>(e==<span class="number">0xff</span>)</span><br><span class="line">        uf=uf&amp;setF;</span><br><span class="line">    <span class="keyword">return</span> uf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatFloat2Int">floatFloat2Int</h3><p>题目要求：将单精度浮点数转化为整型数，若浮点数为inf或NaN或者超出整型范围的则返回0x80000000u。允许使用整型、无符号型的运算符，以及 &amp;&amp; || if while 。运算符个数不超过30。</p><p>思路：根据浮点数可得到符号位、指数部分。原来的浮点数将前8位置为0，第9位置为1可得到该浮点数的绝对值的整型表示。</p><p>然后根据指数部分移位。</p><ul><li>若 E&gt;127+23 ，应左移 E-150 位。特别地，当 E&gt;=127+31，即 E&gt;=158时将会溢出，此时应返回0x80000000u。</li><li>若 E&lt;127+23 ，应右移 E-150 位。特别地，当 E&lt;127 时，说明这个浮点数的绝对值小于1，应抛弃小数部分直接返回0。</li></ul><p>最后再还原符号位。若为0或负数，直接取负即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">floatFloat2Int</span><span class="params">(<span class="type">unsigned</span> uf)</span> &#123;</span><br><span class="line">    <span class="type">int</span> s=(uf&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> e=(uf&gt;&gt;<span class="number">23</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">    <span class="type">int</span> temp=e<span class="number">-150</span>;</span><br><span class="line">    uf=uf&amp;(<span class="number">0xff</span>+(<span class="number">0xff</span>&lt;&lt;<span class="number">8</span>)+(<span class="number">0xff</span>&lt;&lt;<span class="number">16</span>));</span><br><span class="line">    <span class="comment">// 即 uf=uf&amp;0x00ffffff</span></span><br><span class="line">    uf=uf|(<span class="number">1</span>&lt;&lt;<span class="number">23</span>);</span><br><span class="line">    <span class="keyword">if</span>(e&gt;=<span class="number">158</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e&gt;=<span class="number">150</span>)</span><br><span class="line">        uf=uf&lt;&lt;temp;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e&gt;=<span class="number">127</span>)</span><br><span class="line">        uf=uf&gt;&gt;(-temp);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        uf=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">1</span>)</span><br><span class="line">        uf=-uf;</span><br><span class="line">    <span class="keyword">return</span> uf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatPower2">floatPower2</h3><p>题目要求：返回2.0^x。允许使用整型、无符号型的运算符，以及 &amp;&amp; || if while 。运算符个数不超过30。</p><p>思路：根据题意只需要设置指数部分。当 E 的范围为 0 &lt; E &lt; 255，也即 -127 &lt; x &lt; 128 时返回 E&lt;&lt;23 。当 E&lt;=0 和 E&gt;=255 时特殊处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="title function_">floatPower2</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">-127</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=<span class="number">128</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x7f800000</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">unsigned</span> e=x+<span class="number">127</span>;</span><br><span class="line">        <span class="keyword">return</span> e&lt;&lt;<span class="number">23</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完结撒花">完结撒花</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Correctness Results     Perf Results</span><br><span class="line">Points  Rating  Errors  Points  Ops     Puzzle</span><br><span class="line">1       1       0       2       7       bitXor</span><br><span class="line">1       1       0       2       1       tmin</span><br><span class="line">1       1       0       2       7       isTmax</span><br><span class="line">2       2       0       2       7       allOddBits</span><br><span class="line">2       2       0       2       2       negate</span><br><span class="line">3       3       0       2       11      isAsciiDigit</span><br><span class="line">3       3       0       2       7       conditional</span><br><span class="line">3       3       0       2       15      isLessOrEqual</span><br><span class="line">4       4       0       2       9       logicalNeg</span><br><span class="line">4       4       0       2       39      howManyBits</span><br><span class="line">4       4       0       2       14      floatScale2</span><br><span class="line">4       4       0       2       21      floatFloat2Int</span><br><span class="line">4       4       0       2       5       floatPower2</span><br><span class="line"></span><br><span class="line">Score = 62/62 [36/36 Corr + 26/26 Perf] (145 total operators)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
